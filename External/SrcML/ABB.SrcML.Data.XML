<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ABB.SrcML.Data</name>
    </assembly>
    <members>
        <member name="T:ABB.SrcML.Data.Archive">
            <summary>
            Class representing a SrcML archive from the database
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.Archive.#ctor(ABB.SrcML.SrcMLFile)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Data.Archive"/> class.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:ABB.SrcML.Data.Archive.GetDefinitionsFromArchive">
            <summary>
            Gets the definitions from archive.
            </summary>
            <returns>all the definitions associated with this archive</returns>
        </member>
        <member name="M:ABB.SrcML.Data.Archive.GetDefinitionsFromFileUnit(System.Xml.Linq.XElement)">
            <summary>
            Creates definitions from this file unit
            </summary>
            <param name="fileUnit">The file unit.</param>
            <returns>an enumerable of definition objects to be inserted into the database</returns>
        </member>
        <member name="M:ABB.SrcML.Data.Archive.GetDeclarationForVariable(ABB.SrcML.Data.SrcMLDataContext,System.Xml.Linq.XElement)">
            <summary>
            Locates possible variable declarations that match the given name element.
            </summary>
            <param name="db">The db.</param>
            <param name="element">The element.</param>
            <returns>A collection of declarations that match this element</returns>
        </member>
        <member name="M:ABB.SrcML.Data.Archive.GetDeclarationForVariable(ABB.SrcML.Data.SrcMLDataContext,System.Xml.Linq.XElement,System.String)">
            <summary>
            Locates possible variable declarations that match the given name element.
            </summary>
            <param name="db">The db.</param>
            <param name="element">The element.</param>
            <param name="containerPath">The container path.</param>
            <returns>A collection of declarations that match this element</returns>
        </member>
        <member name="M:ABB.SrcML.Data.Archive.GetTypeForVariableName(ABB.SrcML.Data.SrcMLDataContext,System.Xml.Linq.XElement)">
            <summary>
            Locates the ty
            </summary>
            <param name="db">The db.</param>
            <param name="typeElement">The type element.</param>
            <returns>a collection of type definitions that match the given element.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.Archive.GetMethodForCall(ABB.SrcML.Data.SrcMLDataContext,System.Xml.Linq.XElement)">
            <summary>
            Gets a collection of method definitions that match the given call element.
            </summary>
            <param name="db">The db.</param>
            <param name="call">The call.</param>
            <returns>A collection of method definitions that match</returns>
        </member>
        <member name="P:ABB.SrcML.Data.Archive.Document">
            <summary>
            Gets the document.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.CallGraph">
            <summary>
            Call graph that contains pairings between 
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.CallGraph.#ctor(System.String,ABB.SrcML.Data.SrcMLDataContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Data.CallGraph"/> class.
            </summary>
            <param name="xmlFileName">Name of the XML file.</param>
            <param name="db">The db.</param>
        </member>
        <member name="M:ABB.SrcML.Data.CallGraph.ContainsRelationship(ABB.SrcML.Data.MethodDefinition,ABB.SrcML.Data.MethodDefinition)">
            <summary>
            Determines whether the specified caller contains relationship.
            </summary>
            <param name="caller">The caller.</param>
            <param name="callee">The callee.</param>
            <returns>
              <c>true</c> if the specified caller contains relationship; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ABB.SrcML.Data.CallGraph.ContainsRelationship(System.String,System.String)">
            <summary>
            Determines whether the specified caller calls the callee.
            </summary>
            <param name="caller">The caller.</param>
            <param name="callee">The callee.</param>
            <returns>
              <c>true</c> if the specified caller contains relationship; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ABB.SrcML.Data.CallGraph.GetCallees(ABB.SrcML.Data.MethodDefinition)">
            <summary>
            Gets the callees.
            </summary>
            <param name="method">The method.</param>
            <returns>The method definitions that this method calls.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CallGraph.GetCallees(System.String)">
            <summary>
            Gets the callees.
            </summary>
            <param name="methodSignature">The method signature.</param>
            <returns>The method definitions that this method calls.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CallGraph.GetCallers(ABB.SrcML.Data.MethodDefinition)">
            <summary>
            Gets the callers.
            </summary>
            <param name="method">The method.</param>
            <returns>The method definitions that call this method.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CallGraph.GetCallers(System.String)">
            <summary>
            Gets the callers.
            </summary>
            <param name="methodSignature">The method signature.</param>
            <returns>The method definitions that call this method.</returns>
        </member>
        <member name="M:ABB.SrcML.Data.CallGraph.BuildGraph(System.String,System.String)">
            <summary>
            Builds the graph.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="xmlFileName">the path to the SrcML document</param>
        </member>
        <member name="M:ABB.SrcML.Data.CallGraph.BuildGraph(System.Xml.Linq.XElement,System.Collections.Generic.Dictionary{System.String,System.Int32},System.Collections.Generic.Dictionary{System.Tuple{System.String,System.String},System.String},System.Collections.Generic.Dictionary{System.Tuple{System.Xml.Linq.XName,System.String,System.String,System.Int32},System.Collections.Generic.List{System.Int32}})">
            <summary>
            Builds the graph for the specified source file unit.
            </summary>
            <param name="fileUnit">The file unit.</param>
            <param name="methodIdMap">The method id map.</param>
            <param name="scopeMap">The scope map.</param>
            <param name="methodSignatureMap">The method signature map.</param>
            <returns>a collection of method call objects to be inserted into the database</returns>
        </member>
        <member name="P:ABB.SrcML.Data.CallGraph.Document">
            <summary>
            Gets the document the graph is based on
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.ContainerNames">
            <summary>
            Collections of container names used by some of the mappings
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.ContainerNames.All">
            <summary>
            All container names
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.ContainerNames.TypeDefinitions">
            <summary>
            All type definition names
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.ContainerNames.ClassSections">
            <summary>
            All class section names
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.ContainerNames.Methods">
            <summary>
            All method-related names
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.ContainerNames.MethodDefinitions">
            <summary>
            All method names
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.ContainerNames.MethodDeclarations">
            <summary>
            All method declaration names
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.Declaration">
            <summary>
            Class to represent declaration info in the database.
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.Definition">
            <summary>
            base class for definitions
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.Definition.#ctor(System.Xml.Linq.XElement,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Data.Definition"/> class.
            </summary>
            <param name="element">The element.</param>
            <param name="fileName">Name of the file the element belongs to</param>
        </member>
        <member name="M:ABB.SrcML.Data.Definition.CreateFromElement(System.Xml.Linq.XElement,System.String,System.Int32)">
            <summary>
            Create a definition from the given elementXName
            </summary>
            <param name="element">The element.</param>
            <param name="fileName">Name of the file that contains the element</param>
            <param name="archiveId">The archive id that the file belongs to</param>
            <returns></returns>
        </member>
        <member name="P:ABB.SrcML.Data.Definition.ValidNames">
            <summary>
            Valid XNames for definitions
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.Declaration.CreateFromElement(System.Xml.Linq.XElement,System.String)">
            <summary>
            Creates a declaration object from the given element.
            </summary>
            <param name="element">The element.</param>
            <param name="fileName">Name of the file.</param>
            <returns>the declaration object</returns>
        </member>
        <member name="M:ABB.SrcML.Data.Declaration.#ctor(System.Xml.Linq.XElement,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Data.Declaration"/> class.
            </summary>
            <param name="declaration">The declaration.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="P:ABB.SrcML.Data.Declaration.ValidNames">
            <summary>
            Valid XNames for declarations
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.VariableDeclaration">
            <summary>
            Class to represent variable declarations in the database
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.VariableDeclaration.#ctor(System.Xml.Linq.XElement,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Data.VariableDeclaration"/> class.
            </summary>
            <param name="declaration">The declaration.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="P:ABB.SrcML.Data.VariableDeclaration.ValidNames">
            <summary>
            Valid XNames for variable declarations
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.MethodDeclaration">
            <summary>
            Class to represent method declarations in the database
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.MethodDeclaration.#ctor(System.Xml.Linq.XElement,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Data.MethodDeclaration"/> class.
            </summary>
            <param name="declaration">The declaration.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="P:ABB.SrcML.Data.MethodDeclaration.ValidNames">
            <summary>
            Valid XNames for method declarations
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.TypeDeclaration">
            <summary>
            Class to represent type declarations in the database
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.TypeDeclaration.#ctor(System.Xml.Linq.XElement,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Data.TypeDeclaration"/> class.
            </summary>
            <param name="declaration">The declaration.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="P:ABB.SrcML.Data.TypeDeclaration.ValidNames">
            <summary>
            Valid XNames for type declarations
            </summary>
        </member>
        <member name="T:Microsoft.Samples.EntityDataReader.EntityDataReader`1">
            <summary>
            The EntityDataReader wraps a collection of CLR objects in a DbDataReader.  
            Only "scalar" properties are projected, with the exception that Entity Framework
            EntityObjects that have references to other EntityObjects will have key values for
            the related entity projected.
            
            This is useful for doing high-speed data loads with SqlBulkCopy, and copying collections
            of entities ot a DataTable for use with SQL Server Table-Valued parameters, or for interop
            with older ADO.NET applciations.
            
            For explicit control over the fields projected by the DataReader, just wrap your collection
            of entities in a anonymous type projection before wrapping it in an EntityDataReader.
            
            Instead of 
            IEnumerable&lt;Order&gt; orders;
            ...
            IDataReader dr = orders.AsDataReader();
            
            do
            IEnumerable&lt;Order&gt; orders;
            ...
            var q = from o in orders
                    select new 
                    {
                       ID=o.ID,
                       ShipDate=o.ShipDate,
                       ProductName=o.Product.Name,
                       ...
                    }
            IDataReader dr = q.AsDataReader();
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Microsoft.Samples.EntityDataReader.EntityDataReader`1.Attribute.MakePropertyAccessor``2(System.Reflection.PropertyInfo)">
            <summary>
            Uses Lamda expressions to create a Func&lt;T,object&gt; that invokes the given property getter.
            The property value will be extracted and cast to type TProperty
            </summary>
            <typeparam name="TObject">The type of the object declaring the property.</typeparam>
            <typeparam name="TProperty">The type to cast the property value to</typeparam>
            <param name="pi">PropertyInfo pointing to the property to wrap</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Samples.EntityDataReader.EntityDataReaderOptions.ExposeNullableTypes">
            <summary>
            If true nullable value types are returned directly by the DataReader.
            If false, the DataReader will expose non-nullable value types and return DbNull.Value
            for null values.  
            When loading a DataTable this option must be set to True, since DataTable does not support
            nullable types.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.EntityDataReader.EntityDataReaderOptions.FlattenRelatedObjects">
            <summary>
            If True then the DataReader will project scalar properties from related objects in addition
            to scalar properties from the main object.  This is especially useful for custom projecttions like
                    var q = from od in db.SalesOrderDetail
                    select new
                    {
                      od,
                      ProductID=od.Product.ProductID,
                      ProductName=od.Product.Name
                    };
            Related objects assignable to EntityKey, EntityRelation, and IEnumerable are excluded.
            
            If False, then only scalar properties from teh main object will be projected.         
            </summary>
        </member>
        <member name="P:Microsoft.Samples.EntityDataReader.EntityDataReaderOptions.PrefixRelatedObjectColumns">
            <summary>
            If True columns projected from related objects will have column names prefixed by the
            name of the relating property.  This appies to either from setting FlattenRelatedObjects to True,
            or RecreateForeignKeysForEntityFrameworkEntities to True.
            
            If False columns will be created for related properties that are not prefixed.  This can lead
            to column name collision.
            </summary>
        </member>
        <member name="P:Microsoft.Samples.EntityDataReader.EntityDataReaderOptions.RecreateForeignKeysForEntityFrameworkEntities">
            <summary>
            If True the DataReader will create columns for the key properties of related Entities.
            You must pass an ObjectContext and have retrieved the entity with change tracking for this to work.
            </summary>
        </member>
        <member name="M:Microsoft.Samples.EntityDataReader.EntityDataReaderExtensions.AsDataReader``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Wraps the IEnumerable in a DbDataReader, having one column for each "scalar" property of the type T.  
            The collection will be enumerated as the client calls IDataReader.Read().
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Samples.EntityDataReader.EntityDataReaderExtensions.AsDataReader``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean)">
            <summary>
            Wraps the IEnumerable in a DbDataReader, having one column for each "scalar" property of the type T.  
            The collection will be enumerated as the client calls IDataReader.Read().
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Samples.EntityDataReader.EntityDataReaderExtensions.ToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enumerates the collection and copies the data into a DataTable.
            </summary>
            <typeparam name="T">The element type of the collection.</typeparam>
            <param name="collection">The collection to copy to a DataTable</param>
            <returns>A DataTable containing the scalar projection of the collection.</returns>
        </member>
        <member name="M:Microsoft.Samples.EntityDataReader.EntityDataReaderExtensions.AsDataReader``1(System.Collections.Generic.IEnumerable{``0},System.Data.Objects.ObjectContext)">
            <summary>
            Wraps the collection in a DataReader, but also includes columns for the key attributes of related Entities.
            </summary>
            <typeparam name="T">The element type of the collection.</typeparam>
            <param name="collection">A collection to wrap in a DataReader</param>
            <param name="cx">The Entity Framework ObjectContext, used for metadata access</param>
            <returns>A DbDataReader wrapping the collection.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.Samples.EntityDataReader.EntityDataReaderExtensions.AsDataReader``1(System.Collections.Generic.IEnumerable{``0},System.Data.Objects.ObjectContext,System.Boolean,System.Boolean)" -->
        <member name="M:Microsoft.Samples.EntityDataReader.EntityDataReaderExtensions.ToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.Objects.ObjectContext)">
            <summary>
            Enumerates the collection and copies the data into a DataTable, but also includes columns for the key attributes of related Entities.
            </summary>
            <typeparam name="T">The element type of the collection.</typeparam>
            <param name="collection">The collection to copy to a DataTable</param>
            <param name="cx">The Entity Framework ObjectContext, used for metadata access</param>
            <returns>A DataTable containing the scalar projection of the collection.</returns>
        </member>
        <member name="T:ABB.SrcML.Data.ProgressEventArgs">
            <summary>
            Definition of the progress event arguments
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.ProgressEventArgs.#ctor(System.String,System.String)">
            <summary>
            Constructor for ProgressEventArgs
            </summary>
            <param name="fileName">the srcML file being processed.</param>
            <param name="message">message indicating what has been done.</param>
        </member>
        <member name="P:ABB.SrcML.Data.ProgressEventArgs.Message">
            <summary>
            the progress event message
            </summary>
        </member>
        <member name="P:ABB.SrcML.Data.ProgressEventArgs.FileName">
            <summary>
            The srcML file name being processed.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.ScopeDefinition.CreateFromElement(System.Xml.Linq.XElement,System.String)">
            <summary>
            Creates scope definitions from the given element
            </summary>
            <param name="element">The element.</param>
            <param name="fileName">Name of the file.</param>
            <returns>collection of scope definitions for each scope found</returns>
        </member>
        <member name="M:ABB.SrcML.Data.ScopeDefinition.#ctor(System.Xml.Linq.XElement,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Data.ScopeDefinition"/> class.
            </summary>
            <param name="element">The element.</param>
            <param name="fileName">Name of the file the element belongs to</param>
        </member>
        <member name="M:ABB.SrcML.Data.ScopeDefinition.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Data.ScopeDefinition"/> class.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:ABB.SrcML.Data.ScopeDefinition.GetElements(System.Xml.Linq.XElement,ABB.SrcML.Data.SrcMLDataContext)">
            <summary>
            Gets the elements.
            </summary>
            <param name="fileUnit">The file unit.</param>
            <param name="db">The db.</param>
            <returns></returns>
        </member>
        <member name="P:ABB.SrcML.Data.ScopeDefinition.ValidNames">
            <summary>
            Valid XNames for scope definitions
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.MethodDefinition">
            <summary>
            Class to represent method definitions in the database
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.MethodDefinition.#ctor(System.Xml.Linq.XElement,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Data.MethodDefinition"/> class.
            </summary>
            <param name="element">The element.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:ABB.SrcML.Data.MethodDefinition.CountParameters(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Counts the parameters. This function is used to handle the special case of <c>foo(void)</c>, which has 0 parameters.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.Data.MethodDefinition.MakeSignature(System.Xml.Linq.XName,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Makes the signature.
            </summary>
            <param name="elementType">Type of the element.</param>
            <param name="className">Name of the class.</param>
            <param name="methodName">Name of the method.</param>
            <param name="numberOfParameters">The number of parameters.</param>
            <param name="lineNumber">The line number.</param>
            <returns>a method signature</returns>
        </member>
        <member name="P:ABB.SrcML.Data.MethodDefinition.ValidNames">
            <summary>
            Valid XNames for method definitions
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.TypeDefinition">
            <summary>
            class to represent various type definitions
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.TypeDefinition.#ctor(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Data.TypeDefinition"/> class.
            </summary>
            <param name="element">The element.</param>
            <param name="name">The name.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:ABB.SrcML.Data.TypeDefinition.#ctor(System.Xml.Linq.XElement,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Data.TypeDefinition"/> class.
            </summary>
            <param name="element">The element.</param>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="P:ABB.SrcML.Data.TypeDefinition.ValidNames">
            <summary>
            Valid XNames for type definitions
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.SrcMLDataContext">
            <summary>
            Data context object for accessing a SrcMLData database
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.SrcMLDataContext.ConnectionStringFormat">
            <summary>String format to use for database connection strings where the name must be specified.</summary>
        </member>
        <member name="F:ABB.SrcML.Data.SrcMLDataContext.ConnectionStringWithUserInstanceFormat">
            <summary>String format to use for database connection strings where the name must be specified.</summary>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLDataContext.OnRaiseProgressEvent(ABB.SrcML.Data.ProgressEventArgs)">
            <summary>
            Raises the progress event to indicate that progress has been made generating srcML data
            </summary>
            <param name="e">arguments for this event.</param>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLDataContext.CreateDatabaseConnection(System.String)">
            <summary>
            Creates the database connection. If the database does not exist it will be created.
            </summary>
            <param name="dbName">Name of the db.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLDataContext.CreateDatabaseConnection(System.String,System.Boolean)">
            <summary>
            Creates the database connection. if the database does not exist it will be created.
            </summary>
            <param name="dbName">Name of the db.</param>
            <param name="dropIfExists">if set to <c>true</c> [drop if exists].</param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLDataContext.DropDatabase(System.String)">
            <summary>
            Drops the database.
            </summary>
            <param name="dbName">Name of the db.</param>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLDataContext.CreateUserInstanceDatabaseConnection(System.String)">
            <summary>
            Creates a user instance database connection with the given DB file path. if the database does not exist it will be created.
            The DB name will be automatically generated by SQL Server Express.
            </summary>
            <param name="dbFileName">Path to the DB file.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLDataContext.DropUserInstanceDatabase(System.String)">
            <summary>
            Drops the database in the user-instance SQLServerExpress.
            </summary>
            <param name="dbName">Name of the db.</param>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLDataContext.MakeDBName(System.String)">
            <summary>
            Makes the name of the db.
            </summary>
            <param name="xmlFileName">Name of the XML file.</param>
            <returns>a valid DB name</returns>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLDataContext.DatabaseExists(System.String)">
            <summary>
            Checks if a database with the given name exists.
            </summary>
            <param name="dbName">Name of the db.</param>
            <returns>true if the database exists; false otherwise</returns>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLDataContext.Load(System.String)">
            <summary>
            Loads the srcml archive specified by <paramref name="fileName"/> into the database
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLDataContext.GetDeclarationForVariableName(System.Xml.Linq.XElement)">
            <summary>
            Given the SrcML Name element for a use of a variable, this method returns the corresponding ABB.SrcML.Data.VariableDeclaration.
            </summary>
            <param name="nameElement">The SrcML Name element to define.</param>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLDataContext.GetDefinitionForMethodCall(System.Xml.Linq.XElement)">
            <summary>
            Returns the MethodDefinition associated with a given method call srcML element.
            </summary>
            <param name="callElement">The Call element to find the method definition for.</param>
        </member>
        <member name="E:ABB.SrcML.Data.SrcMLDataContext.RaiseProgressEvent">
            <summary>event handler for progress events.</summary>
        </member>
        <member name="T:ABB.SrcML.Data.DefinitionType">
            <summary>
            Enum for distinguishing between the different definition types
            </summary>
        </member>
        <member name="F:ABB.SrcML.Data.DefinitionType.Unknown">
            <summary>indicates that this is a <see cref="T:ABB.SrcML.Data.UnknownDefinition"/></summary>
        </member>
        <member name="F:ABB.SrcML.Data.DefinitionType.Scope">
            <summary>indicates that this is a <see cref="T:ABB.SrcML.Data.ScopeDefinition"/></summary>
        </member>
        <member name="F:ABB.SrcML.Data.DefinitionType.Declaration">
            <summary>indicates that this is a <see cref="F:ABB.SrcML.Data.DefinitionType.Declaration"/></summary>
        </member>
        <member name="F:ABB.SrcML.Data.DefinitionType.ScopeType">
            <summary>indicates that this is a <see cref="T:ABB.SrcML.Data.TypeDefinition"/></summary>
        </member>
        <member name="F:ABB.SrcML.Data.DefinitionType.ScopeMethod">
            <summary>indicates that this is a <see cref="T:ABB.SrcML.Data.MethodDefinition"/></summary>
        </member>
        <member name="F:ABB.SrcML.Data.DefinitionType.DeclarationVariable">
            <summary>indicates that this is a <see cref="T:ABB.SrcML.Data.VariableDeclaration"/></summary>
        </member>
        <member name="F:ABB.SrcML.Data.DefinitionType.DeclarationMethod">
            <summary>indicates that this is a <see cref="T:ABB.SrcML.Data.MethodDeclaration"/></summary>
        </member>
        <member name="F:ABB.SrcML.Data.DefinitionType.DeclarationType">
            <summary>indicates that this is a <see cref="T:ABB.SrcML.Data.TypeDeclaration"/></summary>
        </member>
        <member name="T:ABB.SrcML.Data.ValidScope">
            <summary>
            Class to represent valid scopes for definitions in the database
            </summary>
        </member>
        <member name="T:ABB.SrcML.Data.SrcMLDataException">
            <summary>
            exception for errors in SrcMLData
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLDataException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Data.SrcMLDataException"/> class.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLDataException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Data.SrcMLDataException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLDataException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Data.SrcMLDataException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ABB.SrcML.Data.SrcMLDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Data.SrcMLDataException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
              
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
    </members>
</doc>
