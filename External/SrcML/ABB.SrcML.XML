<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ABB.SrcML</name>
    </assembly>
    <members>
        <member name="T:ABB.SrcML.AbstractArchive">
            <summary>
            The abstract archive class is the base class for archives. Archives are responsible for recording changes to files and then raising an <see cref="E:ABB.SrcML.AbstractArchive.FileChanged">event</see> when they are done.
            </summary>
        </member>
        <member name="M:ABB.SrcML.AbstractArchive.#ctor(System.String,System.String,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Sets the archive path for AbstractArchive objects
            </summary>
            <param name="baseDirectory">the base directory</param>
            <param name="archiveSubDirectory">the relative path within <paramref name="baseDirectory"/></param>
            <param name="scheduler">the scheduler to use for asynchronous methods</param>
        </member>
        <member name="M:ABB.SrcML.AbstractArchive.AddOrUpdateFileImpl(System.String)">
            <summary>
            Sub-classes of AbstractArchive should implement the "add or update file" functionality here in order to enable <see cref="M:ABB.SrcML.AbstractArchive.AddOrUpdateFile(System.String)"/> and <see cref="M:ABB.SrcML.AbstractArchive.AddOrUpdateFileAsync(System.String)"/>
            </summary>
            <param name="fileName">The file name to add or update. If the file exists, it is deleted and then added regardless of whether or not the file is outdated</param>
        </member>
        <member name="M:ABB.SrcML.AbstractArchive.DeleteFileImpl(System.String)">
            <summary>
            Sub-classes of AbstractArchive should implement the "delete file" functionality here in order to enable <see cref="M:ABB.SrcML.AbstractArchive.DeleteFile(System.String)"/> and <see cref="M:ABB.SrcML.AbstractArchive.DeleteFileAsync(System.String)"/>
            </summary>
            <param name="fileName">The file name to delete. If it does not exist, nothing happens</param>
        </member>
        <member name="M:ABB.SrcML.AbstractArchive.RenameFileImpl(System.String,System.String)">
            <summary>
            Sub-classes of AbstractArchive should implement the "rename file" functionality here in order to enable <see cref="M:ABB.SrcML.AbstractArchive.RenameFile(System.String,System.String)"/> and <see cref="M:ABB.SrcML.AbstractArchive.RenameFileAsync(System.String,System.String)"/>
            </summary>
            <param name="oldFileName">the existing path</param>
            <param name="newFileName">the new path</param>
        </member>
        <member name="M:ABB.SrcML.AbstractArchive.AddOrUpdateFile(System.String)">
            <summary>
            Adds or updates <paramref name="fileName"/> within the archive
            </summary>
            <param name="fileName">The file name to add or update. If the file exists, it is deleted and then added regardless of whether or not the file is outdated</param>
        </member>
        <member name="M:ABB.SrcML.AbstractArchive.AddOrUpdateFileAsync(System.String)">
            <summary>
            Adds or updates <paramref name="fileName"/> within the archive asynchronously. A new <see cref="T:System.Threading.Tasks.Task"/> is run via <see cref="T:System.Threading.Tasks.TaskFactory"/>.
            </summary>
            <param name="fileName">The file name to add or update. If the file exists, it is deleted and then added regardless of whether or not the file is outdated</param>
        </member>
        <member name="M:ABB.SrcML.AbstractArchive.DeleteFile(System.String)">
            <summary>
            Deletes <paramref name="fileName"/> from the archive
            </summary>
            <param name="fileName">The file name to delete. If it does not exist, nothing happens</param>
        </member>
        <member name="M:ABB.SrcML.AbstractArchive.DeleteFileAsync(System.String)">
            <summary>
            Deletes <paramref name="fileName"/> from the archive asynchronously. A new <see cref="T:System.Threading.Tasks.Task"/> is run via <see cref="T:System.Threading.Tasks.TaskFactory"/>.
            </summary>
            <param name="fileName">The file name to delete. If it does not exist, nothing happens</param>
        </member>
        <member name="M:ABB.SrcML.AbstractArchive.RenameFile(System.String,System.String)">
            <summary>
            Renames the file to the new file name
            </summary>
            <param name="oldFileName">the existing path</param>
            <param name="newFileName">the new path</param>
        </member>
        <member name="M:ABB.SrcML.AbstractArchive.RenameFileAsync(System.String,System.String)">
            <summary>
            Renames the file to the new file name asynchronously. A new <see cref="T:System.Threading.Tasks.Task"/> is run via <see cref="T:System.Threading.Tasks.TaskFactory"/>.
            </summary>
            <param name="oldFileName">the existing path</param>
            <param name="newFileName">the new path</param>
        </member>
        <member name="M:ABB.SrcML.AbstractArchive.ContainsFile(System.String)">
            <summary>
            Tests to see if the archive contains <paramref name="fileName"/>
            </summary>
            <param name="fileName">the file name to check for</param>
            <returns>True if the file is in the archive; false otherwise</returns>
        </member>
        <member name="M:ABB.SrcML.AbstractArchive.IsOutdated(System.String)">
            <summary>
            Compares file name with the archive representation
            </summary>
            <param name="fileName">the file name to check for</param>
            <returns>True if the archive version of the file is older than <paramref name="fileName"/></returns>
        </member>
        <member name="M:ABB.SrcML.AbstractArchive.GetFiles">
            <summary>
            Gets all of the file names stored in this archive
            </summary>
            <returns>An enumerable of filenames stored in this archive.</returns>
        </member>
        <member name="M:ABB.SrcML.AbstractArchive.OnFileChanged(ABB.SrcML.FileEventRaisedArgs)">
            <summary>
            Raise the FileChanged event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:ABB.SrcML.AbstractArchive.LogExceptions(System.Threading.Tasks.Task)">
            <summary>
            Convenience function for logging exceptions upon task failure.
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:ABB.SrcML.AbstractArchive.Dispose">
            <summary>
            Disposes of this object
            </summary>
        </member>
        <member name="P:ABB.SrcML.AbstractArchive.IsReady">
            <summary>
            Archives are "ready" when they have no running tasks. This property automatically changes to false
            when the number of running tasks is zero. Whenever the value changes, the <see cref="E:ABB.SrcML.AbstractArchive.IsReadyChanged"/> event fires.
            </summary>
        </member>
        <member name="P:ABB.SrcML.AbstractArchive.Scheduler">
            <summary>
            Task factory for the asynchronous methods
            </summary>
        </member>
        <member name="P:ABB.SrcML.AbstractArchive.SupportedExtensions">
            <summary>
            the extensions supported by this collection. The strings returned by this property should match the ones returned by <see cref="M:System.IO.Path.GetExtension(System.String)"/>
            </summary>
        </member>
        <member name="E:ABB.SrcML.AbstractArchive.FileChanged">
            <summary>
            This event should be raised whenever the archive updates its internal representation for a file
            </summary>
        </member>
        <member name="E:ABB.SrcML.AbstractArchive.IsReadyChanged">
            <summary>
            Event fires when the <see cref="P:ABB.SrcML.AbstractArchive.IsReady"/> property changes
            </summary>
        </member>
        <member name="P:ABB.SrcML.AbstractArchive.ArchivePath">
            <summary>
            The path where this archive is stored.
            </summary>
        </member>
        <member name="T:ABB.SrcML.AbstractDocument">
            <summary>
            Provides base functionality for various srcML documents.
            </summary>
        </member>
        <member name="M:ABB.SrcML.AbstractDocument.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.AbstractDocument"/> class.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:ABB.SrcML.AbstractDocument.#ctor(ABB.SrcML.AbstractDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.AbstractDocument"/> class based on <paramref name="other"/>.
            </summary>
            <param name="other">The other <see cref="T:ABB.SrcML.AbstractDocument"/> object to copy</param>
        </member>
        <member name="M:ABB.SrcML.AbstractDocument.WriteXmlnsAttributes(System.Xml.XmlWriter)">
            <summary>
            Write attribute strings for each SrcML namespace to the given XmlWriter. This should be called immediately after XmlWriter.WriteStartElement.
            </summary>
            <param name="writer">Instance of XmlWriter to write to.</param>
        </member>
        <member name="M:ABB.SrcML.AbstractDocument.getRootAttributes(System.String)">
            <summary>
            Gets the root attributes.
            </summary>
            <param name="xmlFilePath">The XML file path.</param>
            <returns>the attributes attached to the root element.</returns>
        </member>
        <member name="P:ABB.SrcML.AbstractDocument.FileName">
            <summary>
            Gets the filename underlying this SrcMLFile.
            </summary>
        </member>
        <member name="P:ABB.SrcML.AbstractDocument.RootAttributeDictionary">
            <summary>
            Returns the attribute dictionary 
            </summary>
        </member>
        <member name="P:ABB.SrcML.AbstractDocument.NumberOfNestedFileUnits">
            <summary>
            Gets the number of nested file units.
            </summary>
        </member>
        <member name="P:ABB.SrcML.AbstractDocument.FileUnits">
            <summary>
            Get all units that have the "filename" attribute. This uses the <see cref="M:ABB.SrcML.XmlHelper.StreamElements(System.String,System.Xml.Linq.XName,System.Int32)"/> function for low memory overhead,
            unless the document is not compound (and the root unit is the only file unit). In that case, it uses <see cref="M:ABB.SrcML.SrcMLElement.Load(System.String)"/>.
            </summary>
        </member>
        <member name="T:ABB.SrcML.AbstractFileMonitor">
            <summary>
            <para>Represents an abstract file monitor. This class contains archives for storing various file types To start using it, you first instantiate
            it with a <see cref="T:ABB.SrcML.AbstractArchive">default archive</see>. You then call <see cref="M:ABB.SrcML.AbstractFileMonitor.RegisterArchive(ABB.SrcML.IArchive,System.Boolean)"/> for each alternative 
            archive. This class automatically routes files to the appropriate archive.</para>
            <para>You begin monitoring by calling <see cref="M:ABB.SrcML.AbstractFileMonitor.StartMonitoring"/>. <see cref="M:ABB.SrcML.AbstractFileMonitor.StartMonitoring"/> should subscribe to any events and then call
            functions to respond to those events:</para>
            <list type="bullet">
            <item><description><see cref="M:ABB.SrcML.AbstractFileMonitor.AddFile(System.String)"/></description></item>
            <item><description><see cref="M:ABB.SrcML.AbstractFileMonitor.DeleteFile(System.String)"/></description></item>
            <item><description></description><see cref="M:ABB.SrcML.AbstractFileMonitor.UpdateFile(System.String)"/></item>
            <item><description><see cref="M:ABB.SrcML.AbstractFileMonitor.RenameFile(System.String,System.String)"/></description></item>
            </list>
            <para>When the archive is done processing the file, it raises its own <see cref="E:ABB.SrcML.AbstractArchive.FileChanged">event</see></para>
            </summary>
        </member>
        <member name="M:ABB.SrcML.AbstractFileMonitor.#ctor(System.String,ABB.SrcML.IArchive,ABB.SrcML.IArchive[])">
            <summary>
            Creates a new AbstractFileMonitor with the default archive and a collection of non-default archives that should be registered
            </summary>
            <param name="baseDirectory">The folder where this monitor stores it archives</param>
            <param name="defaultArchive">The default archive</param>
            <param name="otherArchives">A list of other archives that should be registered via <see cref="!:RegisterArchive(IArchive)"/></param>
        </member>
        <member name="M:ABB.SrcML.AbstractFileMonitor.GetFilesFromSource">
            <summary>
            Gets the list of source files from the object being monitored
            </summary>
            <returns>An enumerable of files to be monitored</returns>
        </member>
        <member name="M:ABB.SrcML.AbstractFileMonitor.GetArchivedFiles">
            <summary>
            Gets the list of files already present in this archive
            </summary>
            <returns>An enumerable of files present in all of the archives</returns>
        </member>
        <member name="M:ABB.SrcML.AbstractFileMonitor.RegisterArchive(ABB.SrcML.IArchive,System.Boolean)">
            <summary>
            Registers an archive in the file monitor. All file changes will be automatically routed to the appropriate archive
            based on file extension (via <see cref="P:ABB.SrcML.AbstractArchive.SupportedExtensions"/>
            </summary>
            <param name="archive">the archive to add.</param>
            <param name="isDefault">whether or not to use this archive as the default archive</param>
        </member>
        <member name="M:ABB.SrcML.AbstractFileMonitor.RespondToArchiveFileEvent(System.Object,ABB.SrcML.FileEventRaisedArgs)">
            <summary>
            Raises the <see cref="E:ABB.SrcML.AbstractFileMonitor.FileChanged"/> event.
            </summary>
            <param name="sender">The caller</param>
            <param name="e">The event arguments</param>
        </member>
        <member name="M:ABB.SrcML.AbstractFileMonitor.StartMonitoring">
            <summary>
            Starts monitoring
            </summary>
        </member>
        <member name="M:ABB.SrcML.AbstractFileMonitor.StopMonitoring">
            <summary>
            Stops monitoring. Also calls <see cref="M:ABB.SrcML.AbstractFileMonitor.Dispose"/>
            </summary>
        </member>
        <member name="M:ABB.SrcML.AbstractFileMonitor.AddFile(System.String)">
            <summary>
            Processes a file addition by adding the file to the appropriate archive
            </summary>
            <param name="filePath">the file to add</param>
        </member>
        <member name="M:ABB.SrcML.AbstractFileMonitor.DeleteFile(System.String)">
            <summary>
            Processes a file deletion by deleting the file from the appropriate archive
            </summary>
            <param name="filePath">The file to delete</param>
        </member>
        <member name="M:ABB.SrcML.AbstractFileMonitor.UpdateFile(System.String)">
            <summary>
            Processes a file update by updating the file in the appropriate archive
            </summary>
            <param name="filePath">the file to update</param>
        </member>
        <member name="M:ABB.SrcML.AbstractFileMonitor.RenameFile(System.String,System.String)">
            <summary>
            Processes a file rename. If the old and new path are both in the same archive,
            a <see cref="M:ABB.SrcML.AbstractArchive.RenameFile(System.String,System.String)"/> is called on the appropriate archive.
            If they are in different archives, the <see cref="M:ABB.SrcML.AbstractArchive.DeleteFile(System.String)"/> is called on <paramref name="oldFilePath"/>
            and <see cref="M:ABB.SrcML.AbstractArchive.AddOrUpdateFile(System.String)"/> is called on <paramref name="newFilePath"/>
            </summary>
            <param name="oldFilePath">the old file name</param>
            <param name="newFilePath">the new file name</param>
        </member>
        <member name="M:ABB.SrcML.AbstractFileMonitor.Startup">
            <summary>
            Synchronizes the archives with the object being monitored. Startup adds or updates outdated archive files and deletes archive files that are
            no longer present on disk.
            </summary>
        </member>
        <member name="M:ABB.SrcML.AbstractFileMonitor.Startup_Concurrent(System.Int32)">
            <summary> For Sando, add degree of parallelism
            Synchronizes the archives with the object being monitored. Startup adds or updates outdated archive files and deletes archive files that are
            no longer present on disk.
            </summary>
        </member>
        <member name="M:ABB.SrcML.AbstractFileMonitor.Dispose">
            <summary>
            disposes of all of the archives and stops the events
            </summary>
        </member>
        <member name="M:ABB.SrcML.AbstractFileMonitor.OnFileChanged(ABB.SrcML.FileEventRaisedArgs)">
            <summary>
            event handler for <see cref="E:ABB.SrcML.AbstractFileMonitor.FileChanged"/>
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ABB.SrcML.AbstractFileMonitor.OnIsReadyChanged(ABB.SrcML.IsReadyChangedEventArgs)">
            <summary>
            event handler for <see cref="E:ABB.SrcML.AbstractFileMonitor.IsReadyChanged"/>
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ABB.SrcML.AbstractFileMonitor.OnMonitoringStopped(System.EventArgs)">
            <summary>
            event handler for <see cref="E:ABB.SrcML.AbstractFileMonitor.MonitoringStopped"/>
            </summary>
            <param name="e">null event</param>
        </member>
        <member name="M:ABB.SrcML.AbstractFileMonitor.GetArchiveForFile(System.String)">
            <summary>
            Gets the appropriate archive for string this file name (based on <see cref="M:System.IO.Path.GetExtension(System.String)"/>
            </summary>
            <param name="fileName">The file name</param>
            <returns>The archive that should contain this file name</returns>
        </member>
        <member name="P:ABB.SrcML.AbstractFileMonitor.UseAsyncMethods">
            <summary>
            If true, this monitor will use the Async methods on all of its <see cref="T:ABB.SrcML.AbstractArchive"/> objects. By default it is false.
            </summary>
        </member>
        <member name="P:ABB.SrcML.AbstractFileMonitor.IsReady">
            <summary>
            Indicates that the monitor has finished updating all changed files.
            </summary>
        </member>
        <member name="P:ABB.SrcML.AbstractFileMonitor.MonitorStoragePath">
            <summary>
            The folder where all of the archives can store their data. <see cref="T:ABB.SrcML.AbstractArchive"/> objects can use this as their root folder
            </summary>
        </member>
        <member name="E:ABB.SrcML.AbstractFileMonitor.FileChanged">
            <summary>
            Event fires when any of the archives raises their <see cref="E:ABB.SrcML.AbstractArchive.FileChanged"/>.
            </summary>
        </member>
        <member name="E:ABB.SrcML.AbstractFileMonitor.IsReadyChanged">
            <summary>
            Event fires when the <see cref="P:ABB.SrcML.AbstractFileMonitor.IsReady"/> property changes
            </summary>
        </member>
        <member name="E:ABB.SrcML.AbstractFileMonitor.MonitoringStopped">
            <summary>
            Event fires when <see cref="M:ABB.SrcML.AbstractFileMonitor.StopMonitoring"/> is completed
            </summary>
        </member>
        <member name="P:ABB.SrcML.AbstractFileMonitor.NumberOfAllMonitoredFiles">
            <summary>
            Number of the elements in the returned collection from GetFilesFromSource()
            </summary>
        </member>
        <member name="T:ABB.SrcML.Extensions">
            <summary>
            Extensions for working with SrcML documents
            </summary>
        </member>
        <member name="M:ABB.SrcML.Extensions.ContainsCallTo(System.Xml.Linq.XContainer,System.String)">
            <summary>
            Checks whether the given container contains a call to the specified function.
            </summary>
            <param name="container">The container to test.</param>
            <param name="functionName">The function name to look for.</param>
            <returns>True if the call exists, false if not.</returns>
        </member>
        <member name="M:ABB.SrcML.Extensions.IsDeclOfType(System.Xml.Linq.XElement,System.String)">
            <summary>
            Checks whether the element is a declaration statement for a variable of the specified type.
            </summary>
            <param name="element">The element to test.</param>
            <param name="typeName">The typename to look for.</param>
            <returns>True if this is a declaration for the given type; false if not.</returns>
        </member>
        <member name="M:ABB.SrcML.Extensions.GetLocalDecl(System.Xml.Linq.XElement)">
            <summary>
            Gets the local declaration corresponding to the given name.
            </summary>
            <param name="name">A <see cref="T:ABB.SrcML.SRC"/> element.</param>
            <returns>The corresponding declaration, null if not found.</returns>
        </member>
        <member name="T:ABB.SrcML.FileSystemFolderMonitor">
            <summary>
            An implementation of <see cref="T:ABB.SrcML.AbstractFileMonitor"/> that responds to file system events.
            </summary>
        </member>
        <member name="M:ABB.SrcML.FileSystemFolderMonitor.#ctor(System.String,System.String,ABB.SrcML.IArchive,ABB.SrcML.IArchive[])">
            <summary>
            Creates a new file system monitor
            </summary>
            <param name="pathToSourceFolder">The folder to watch</param>
            <param name="monitoringStorage">The base directory for the archive data</param>
            <param name="defaultArchive">The default archive</param>
            <param name="otherArchives">Other archives to register</param>
        </member>
        <member name="M:ABB.SrcML.FileSystemFolderMonitor.StartMonitoring">
            <summary>
            Start monitoring
            </summary>
        </member>
        <member name="M:ABB.SrcML.FileSystemFolderMonitor.StopMonitoring">
            <summary>
            Stop monitoring
            </summary>
        </member>
        <member name="M:ABB.SrcML.FileSystemFolderMonitor.GetFilesFromSource">
            <summary>
            Get files from folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.FileSystemFolderMonitor.SetupFileSystemWatcher">
            <summary>
            Sets up the internal file system monitor
            </summary>
        </member>
        <member name="M:ABB.SrcML.FileSystemFolderMonitor.HandleFileChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Respond to a file-changed event
            </summary>
            <param name="sender">The sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ABB.SrcML.FileSystemFolderMonitor.HandleFileCreated(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Respond to a file-created event
            </summary>
            <param name="sender">The sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ABB.SrcML.FileSystemFolderMonitor.HandleFileDeleted(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Respond to a file-changed deleted
            </summary>
            <param name="sender">The sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ABB.SrcML.FileSystemFolderMonitor.HandleFileWatcherError(System.Object,System.IO.ErrorEventArgs)">
            <summary>
            Respond to an error for the file system watcher. Not implemented.
            </summary>
            <param name="sender">The sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ABB.SrcML.FileSystemFolderMonitor.HandleFileRenamed(System.Object,System.IO.RenamedEventArgs)">
            <summary>
            Respond to a file-rename event
            </summary>
            <param name="sender">The sender</param>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ABB.SrcML.FileSystemFolderMonitor.isFile(System.String)">
            <summary>
            Checks if the path points to a file
            </summary>
            <param name="fullPath">the path to check</param>
            <returns>true if the path represents a file; false otherwise</returns>
        </member>
        <member name="M:ABB.SrcML.FileSystemFolderMonitor.IsNotInMonitoringStorage(System.String)">
            <summary>
            Checks if the path is located within the archive directory
            </summary>
            <param name="filePath">the path to check</param>
            <returns>True if the path is in the <see cref="P:ABB.SrcML.AbstractFileMonitor.MonitorStoragePath"/></returns>
        </member>
        <member name="P:ABB.SrcML.FileSystemFolderMonitor.FullFolderPath">
            <summary>
            The full path to the folder being monitored
            </summary>
        </member>
        <member name="T:ABB.SrcML.LastModifiedArchive">
            <summary>
            The last modified archive simply stores the last-modified times of all its files.
            It serializes them to disk upon <see cref="M:ABB.SrcML.LastModifiedArchive.Dispose">disposal</see>
            </summary>
        </member>
        <member name="M:ABB.SrcML.LastModifiedArchive.#ctor(System.String)">
            <summary>
            Creates a new archive in the <paramref name="baseDirectory">specified directory</paramref> with a default file name.
            </summary>
            <param name="baseDirectory"></param>
        </member>
        <member name="M:ABB.SrcML.LastModifiedArchive.#ctor(System.String,System.String)">
            <summary>
            Creates a new archive in the <paramref name="baseDirectory">specified directory</paramref> with the given <paramref name="fileName"/>
            </summary>
            <param name="baseDirectory">the directory that this archive will be stored in</param>
            <param name="fileName">the filename to store the mapping in</param>
        </member>
        <member name="M:ABB.SrcML.LastModifiedArchive.#ctor(System.String,System.String,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates a new archive in the <paramref name="baseDirectory">specified directory</paramref> with the given <paramref name="fileName"/>
            </summary>
            <param name="baseDirectory">the directory that this archive will be stored in</param>
            <param name="fileName">the filename to store the mapping in</param>
            <param name="scheduler">The task factory to use for asynchronous methods</param>
        </member>
        <member name="M:ABB.SrcML.LastModifiedArchive.AddOrUpdateFileImpl(System.String)">
            <summary>
            Adds or updates <paramref name="fileName"/> to the archive. It raises <see cref="E:ABB.SrcML.AbstractArchive.FileChanged"/> with
            <see cref="F:ABB.SrcML.FileEventType.FileChanged"/> (if the file was in the archive) or <see cref="F:ABB.SrcML.FileEventType.FileAdded"/>.
            </summary>
            <param name="fileName">The file name to add</param>
        </member>
        <member name="M:ABB.SrcML.LastModifiedArchive.DeleteFileImpl(System.String)">
            <summary>
            Deletes the given <paramref name="fileName"/> from the archive. It raises <see cref="E:ABB.SrcML.AbstractArchive.FileChanged"/> with
            <see cref="F:ABB.SrcML.FileEventType.FileDeleted"/> if the file was in the archive.
            </summary>
            <param name="fileName">The file to delete</param>
        </member>
        <member name="M:ABB.SrcML.LastModifiedArchive.RenameFileImpl(System.String,System.String)">
            <summary>
            Renames filename from <paramref name="oldFileName"/> to <paramref name="newFileName"/>. If <paramref name="oldFileName"/> is
            in the archive, then <see cref="E:ABB.SrcML.AbstractArchive.FileChanged"/> is raised with <see cref="F:ABB.SrcML.FileEventType.FileRenamed"/>. Otherwise, this method simply calls <see cref="M:ABB.SrcML.LastModifiedArchive.AddOrUpdateFileImpl(System.String)"/>
            </summary>
            <param name="oldFileName">the old file path</param>
            <param name="newFileName">the new file path</param>
        </member>
        <member name="M:ABB.SrcML.LastModifiedArchive.ContainsFile(System.String)">
            <summary>
            Checks if the given file name is present in the archive
            </summary>
            <param name="fileName">The file name to test for</param>
            <returns>True if the file is in the archive; false otherwise</returns>
        </member>
        <member name="M:ABB.SrcML.LastModifiedArchive.IsOutdated(System.String)">
            <summary>
            Checks if the archive is outdated in comparison to the original file. A file is outdated if any of the following are true:
            <list type="bullet">
            <item><description>the file does not exist and it is in the archive</description></item>
            <item><description>the file is not in the archive and it exists</description></item>
            <item><description>The last modified time in the archive is more recent than <paramref name="fileName"/></description></item>
            </list>
            </summary>
            <param name="fileName">the file to check</param>
            <returns>True if the file is outdated; false otherwise</returns>
        </member>
        <member name="M:ABB.SrcML.LastModifiedArchive.GetFiles">
            <summary>
            Gets all of the files stored in the archive
            </summary>
            <returns>the files in the archive</returns>
        </member>
        <member name="M:ABB.SrcML.LastModifiedArchive.Dispose">
            <summary>
            saves this archive to disk
            </summary>
        </member>
        <member name="M:ABB.SrcML.LastModifiedArchive.ReadMap">
            <summary>
            Loads this map from disk (assuming <see cref="P:ABB.SrcML.AbstractArchive.ArchivePath"/> exists)
            </summary>
        </member>
        <member name="M:ABB.SrcML.LastModifiedArchive.SaveMap">
            <summary>
            Saves this map to disk (at <see cref="P:ABB.SrcML.AbstractArchive.ArchivePath"/>
            </summary>
        </member>
        <member name="M:ABB.SrcML.LastModifiedArchive.GetFullPath(System.String)">
            <summary>
            Gets the full path for a file name (returns the file name if <see cref="M:System.IO.Path.IsPathRooted(System.String)"/> is true.
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="P:ABB.SrcML.LastModifiedArchive.SupportedExtensions">
            <summary>
            Returns a collection of all supported file extensions.
            </summary>
        </member>
        <member name="T:ABB.SrcML.ShortXmlFileNameMapping">
            <summary>
            Maintains a mapping between source file paths and the paths where XML versions are stored.
            The names of the XML files are relatively short to avoid exceeding the Windows file path character limit.
            </summary>
        </member>
        <member name="T:ABB.SrcML.XmlFileNameMapping">
            <summary>
            Maintains a mapping between source file paths and the paths where XML versions are stored.
            </summary>
        </member>
        <member name="M:ABB.SrcML.XmlFileNameMapping.#ctor(System.String)">
            <summary>
            Creates a new XmlFileNameMapping.
            </summary>
            <param name="xmlDirectory">The directory for the XML files.</param>
        </member>
        <member name="M:ABB.SrcML.XmlFileNameMapping.GetXmlPath(System.String)">
            <summary>
            Returns the path for the XML file mapped to <paramref name="sourcePath"/>.
            </summary>
            <param name="sourcePath">The path for the source file.</param>
            <returns>The full path for an XML file based on <paramref name="sourcePath"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.XmlFileNameMapping.GetSourcePath(System.String)">
            <summary>
            Returns the path where the source file for <paramref name="xmlPath"/> is located.
            </summary>
            <param name="xmlPath">The path for the XML file.</param>
            <returns>The full path for the source file that <paramref name="xmlPath"/> is based on.</returns>
        </member>
        <member name="M:ABB.SrcML.XmlFileNameMapping.SaveMapping">
            <summary>
            Saves the file name mapping to the XmlDirectory.
            </summary>
        </member>
        <member name="M:ABB.SrcML.XmlFileNameMapping.Dispose">
            <summary>
            Disposes of this file name mapping
            </summary>
        </member>
        <member name="P:ABB.SrcML.XmlFileNameMapping.XmlDirectory">
            <summary>
            The directory where the XML files should be located.
            </summary>
        </member>
        <member name="M:ABB.SrcML.ShortXmlFileNameMapping.#ctor(System.String)">
            <summary>
            Creates a new ShortXmlFileNameMapping.
            </summary>
            <param name="xmlDirectory">The directory for the XML files.</param>
        </member>
        <member name="M:ABB.SrcML.ShortXmlFileNameMapping.GetXmlPath(System.String)">
            <summary>
            Returns the path for the XML file mapped to <paramref name="sourcePath"/>.
            </summary>
            <param name="sourcePath">The path for the source file.</param>
            <returns>The full path for an XML file based on <paramref name="sourcePath"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.ShortXmlFileNameMapping.GetSourcePath(System.String)">
            <summary>
            Returns the path where the source file for <paramref name="xmlPath"/> is located.
            </summary>
            <param name="xmlPath">The path for the XML file.</param>
            <returns>The full path for the source file that <paramref name="xmlPath"/> is based on.</returns>
        </member>
        <member name="M:ABB.SrcML.ShortXmlFileNameMapping.SaveMapping">
            <summary>
            Saves the file name mapping to the XmlDirectory.
            </summary>
        </member>
        <member name="M:ABB.SrcML.ShortXmlFileNameMapping.Dispose">
            <summary>
            Disposes of the object. This will write the mapping file to disk.
            </summary>
        </member>
        <member name="M:ABB.SrcML.ShortXmlFileNameMapping.ReadMapping">
            <summary>
            Reads the mapping file in XmlDirectory. 
            If this doesn't exist, it constructs a mapping from any existing SrcML files in the directory.
            </summary>
        </member>
        <member name="M:ABB.SrcML.ShortXmlFileNameMapping.ProcessMapFileEntry(System.String,System.String)">
            <summary>
            Updates the mapping data structures with the info from a single map file entry.
            </summary>
            <param name="sourcePath"></param>
            <param name="xmlPath"></param>
        </member>
        <member name="T:ABB.SrcML.Src2SrcMLRunner2">
            <summary>
            Simpler version of <see cref="T:ABB.SrcML.Src2SrcMLRunner"/>. This is a thin wrapper around the src2srcml executable from KSU.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Src2SrcMLRunner2.Src2SrcMLExecutableName">
            <summary>
            The src2srcml executable name
            </summary>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner2.#ctor">
            <summary>
            Constructs a new object with <see cref="P:ABB.SrcML.Src2SrcMLRunner2.ApplicationDirectory"/> set via <see cref="M:ABB.SrcML.SrcMLHelper.GetSrcMLDefaultDirectory"/>.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner2.#ctor(System.String)">
            <summary>
            Constructs a new object with <see cref="P:ABB.SrcML.Src2SrcMLRunner2.ApplicationDirectory"/> set to <paramref name="applicationDirectory"/>
            </summary>
            <param name="applicationDirectory">The directory that contains <see cref="F:ABB.SrcML.Src2SrcMLRunner2.Src2SrcMLExecutableName">src2srcml.exe</see></param>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner2.GenerateSrcMLFromFile(System.String,System.String,ABB.SrcML.Language,System.Collections.ObjectModel.Collection{System.String},System.Collections.Generic.Dictionary{System.String,ABB.SrcML.Language})">
            <summary>
            Generates srcML from a file
            </summary>
            <param name="fileName">The source file name</param>
            <param name="xmlFileName">the output file name</param>
            <param name="language">The language to use</param>
            <param name="namespaceArguments">additional arguments</param>
            <param name="extensionMapping">an extension mapping</param>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner2.GenerateSrcMLFromFiles(System.Collections.Generic.IEnumerable{System.String},System.String,ABB.SrcML.Language,System.Collections.ObjectModel.Collection{System.String},System.Collections.Generic.Dictionary{System.String,ABB.SrcML.Language})">
            <summary>
            Generates srcML from a file
            </summary>
            <param name="fileNames">An enumerable of filenames</param>
            <param name="xmlFileName">the output file name</param>
            <param name="language">The language to use</param>
            <param name="namespaceArguments">additional arguments</param>
            <param name="extensionMapping">an extension mapping</param>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner2.GenerateSrcMLFromString(System.String,ABB.SrcML.Language,System.Collections.ObjectModel.Collection{System.String},System.Boolean)">
            <summary>
            Generates srcML from the given string of source code
            </summary>
            <param name="source">The source code</param>
            <param name="language">The language</param>
            <param name="namespaceArguments">additional arguments</param>
            <param name="omitXmlDeclaration">If true, the XML header is omitted</param>
            <returns>The srcML</returns>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner2.Run(System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            Runs <see cref="P:ABB.SrcML.Src2SrcMLRunner2.ExecutablePath"/> with the specified arguments
            </summary>
            <param name="arguments">the arguments</param>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner2.Run(System.Collections.ObjectModel.Collection{System.String},System.String)">
            <summary>
            Runs <see cref="P:ABB.SrcML.Src2SrcMLRunner2.ExecutablePath"/> with the specified arguments. <paramref name="standardInput"/> is passed in to the process's standard input stream
            </summary>
            <param name="arguments">configuration arguments</param>
            <param name="standardInput">contents of standard input</param>
            <returns>contents of standard output</returns>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner2.GenerateArguments(System.String,ABB.SrcML.Language,System.Collections.ObjectModel.Collection{System.String},System.Collections.Generic.Dictionary{System.String,ABB.SrcML.Language})">
            <summary>
            Generates command line arguments for src2srcml.exe
            </summary>
            <param name="xmlFileName">the output file name</param>
            <param name="language">The programming language</param>
            <param name="namespaceArguments">additional arguments</param>
            <param name="extensionMapping">a mapping of file extensions to languages</param>
            <returns>A collection of command line arguments</returns>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner2.MakeLanguageArgument(ABB.SrcML.Language)">
            <summary>
            Converts <paramref name="language"/> to <c>--language=LANGUAGE</c>
            </summary>
            <param name="language">The language to use</param>
            <returns>the language command line parameter</returns>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner2.MakeExtensionMapArgument(System.Collections.Generic.Dictionary{System.String,ABB.SrcML.Language})">
            <summary>
            Converts <paramref name="extensionMap"/> to <c>--register-ext EXTENSIONMAP</c>
            </summary>
            <param name="extensionMap">the extension map to use</param>
            <returns>The extension map command line parameter</returns>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner2.MakeOutputArgument(System.String)">
            <summary>
            Converts <paramref name="xmlFileName"/> to <c>--output="XMLFILENAME"</c>
            </summary>
            <param name="xmlFileName">the xml file name</param>
            <returns>The output command line parameter</returns>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner2.QuoteFileName(System.String)">
            <summary>
            Surrounds a <paramref name="fileName"/> with quotation marks
            </summary>
            <param name="fileName">The file name</param>
            <returns>The file name, surrounded with double quotes</returns>
        </member>
        <member name="P:ABB.SrcML.Src2SrcMLRunner2.ApplicationDirectory">
            <summary>
            the application directory
            </summary>
        </member>
        <member name="P:ABB.SrcML.Src2SrcMLRunner2.ExecutablePath">
            <summary>
            The full path to src2srcml.exe.
            </summary>
        </member>
        <member name="T:ABB.SrcML.SrcMLGenerator">
            <summary>
            The SrcML Generator class provides a convenient wrapper for multiple <see cref="T:ABB.SrcML.Src2SrcMLRunner2">src2srcml runners</see>, each targetted at a different language.
            </summary>
        </member>
        <member name="M:ABB.SrcML.SrcMLGenerator.#ctor">
            <summary>
            Creates a new SrcMLGenerator.
            </summary>
        </member>
        <member name="M:ABB.SrcML.SrcMLGenerator.#ctor(System.String)">
            <summary>
            Creates a new SrcMLGenerator
            </summary>
            <param name="defaultExecutableDirectory">The directory containing the default srcml executables to use.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLGenerator.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new SrcMLGenerator
            </summary>
            <param name="defaultExecutableDirectory">The directory containing the default srcml executables to use.</param>
            <param name="namespaceArguments">The namespace arguments to use when converting to SrcML.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLGenerator.RegisterExecutable(System.String,System.Collections.Generic.IEnumerable{ABB.SrcML.Language})">
            <summary>
            Registers a src2srcml executable to use for the given languages.
            </summary>
            <param name="executableDirectory">The directory containing the src2srcml executable to use.</param>
            <param name="languages">A collection of the Languages that should be parsed by this executable.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLGenerator.RegisterExecutable(System.String,System.Collections.Generic.IEnumerable{ABB.SrcML.Language},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Registers a src2srcml executable to use for the given languages.
            </summary>
            <param name="executableDirectory">The directory containing the src2srcml executable to use.</param>
            <param name="languages">A collection of the Languages that should be parsed by this executable.</param>
            <param name="namespaceArguments">The namespace arguments to use when converting to SrcML.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLGenerator.DetectNonDefaultExecutables">
            <summary>
            Scans the directory containing the default src2srcml executable and looks for subdirectories corresponding to defined languages.
            Each of these is registered for the given language.
            </summary>
        </member>
        <member name="M:ABB.SrcML.SrcMLGenerator.GenerateSrcMLFromFile(System.String,System.String)">
            <summary>
            Generate a SrcML document from a single source file. The language will be inferred from the extension.
            </summary>
            <param name="sourceFileName">The path of the source file to convert.</param>
            <param name="xmlFileName">The file name to write the resulting XML to.</param>
            <returns>A SrcMLFile for <paramref name="xmlFileName"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLGenerator.GenerateSrcMLFromFile(System.String,System.String,ABB.SrcML.Language)">
            <summary>
            Generate a SrcML document from a single source file.
            </summary>
            <param name="sourceFileName">The path to the source file to convert.</param>
            <param name="xmlFileName">The file name to write the resulting XML to.</param>
            <param name="language">The language to parse the source file as. If this is Language.Any, then the language will be determined from the file extension.</param>
            <returns>A SrcMLFile for <paramref name="xmlFileName"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLGenerator.GenerateSrcMLFileFromFiles(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Generates a SrcML document from a collection of source files. The language(s) will be inferred from the file extensions.
            </summary>
            <param name="sourceFileNames">The source files to generate SrcML from.</param>
            <param name="xmlFileName">The file name to write the resulting XML to.</param>
            <returns>A SrcMLFile for <paramref name="xmlFileName"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLGenerator.GenerateSrcMLFromFiles(System.Collections.Generic.IEnumerable{System.String},System.String,ABB.SrcML.Language)">
            <summary>
            Generates a SrcML document from a collection of source files using the specified language.
            </summary>
            <param name="sourceFileNames">The source files to generate SrcML from.</param>
            <param name="xmlFileName">The file name to write the resulting XML to.</param>
            <param name="language">The language to parse the source files as.</param>
            <returns>A SrcMLFile for <paramref name="xmlFileName"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLGenerator.GenerateSrcMLFileFromDirectory(System.String,System.String)">
            <summary>
            Generate a SrcML document from the given path and place it in the XML file.
            </summary>
            <param name="directoryPath">The directory path.</param>
            <param name="xmlFileName">The path of the xml file.</param>
            <returns>A SrcMLFile that points at <paramref name="xmlFileName"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLGenerator.GenerateSrcMLFileFromDirectory(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates a SrcML document from the given path and place it in the XML file. The XML document will only contain files not present in <paramref name="filesToExclude"/>.
            </summary>
            <param name="directoryPath">The directory path.</param>
            <param name="xmlFileName">The path of the xml file.</param>
            <param name="filesToExclude">A collection of files to exclude from <paramref name="xmlFileName"/>.</param>
            <returns>A SrcMLFile that points at <paramref name="xmlFileName"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLGenerator.GenerateSrcMLFileFromDirectory(System.String,System.String,ABB.SrcML.Language)">
            <summary>
            Generate a SrcML document from the given path and place it in the XML file. The file will only contain source files classified as <paramref name="languageFilter"/>.
            </summary>
            <param name="directoryPath">The directory path.</param>
            <param name="xmlFileName">The path of the xml file.</param>
            <param name="languageFilter">The language to include.</param>
            <returns>A SrcMLFile that points at <paramref name="xmlFileName"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLGenerator.GenerateSrcMLFromDirectory(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},ABB.SrcML.Language)">
            <summary>
            Generate a SrcML document from the given path and place it in the XML file. The file will only contain source files classified as <paramref name="languageFilter"/>.
            </summary>
            <param name="directoryPath">The directory path.</param>
            <param name="xmlFileName">The path of the xml file.</param>
            <param name="filesToExclude">A collection of files to exclude from <paramref name="xmlFileName"/>.</param>
            <param name="languageFilter">The language to include.</param>
            <returns>A SrcMLFile that points at <paramref name="xmlFileName"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLGenerator.GenerateSrcMLFromString(System.String)">
            <summary>
            Generate SrcML from a given string of source code. The source code will be parsed as C++.
            </summary>
            <param name="source">A string containing the source code to parse.</param>
            <returns>XML representing the source.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLGenerator.GenerateSrcMLFromString(System.String,ABB.SrcML.Language)">
            <summary>
            Generate SrcML from a given string of source code.
            </summary>
            <param name="source">A string containing the source code to parse.</param>
            <param name="language">The language to parse the string as. Language.Any is not valid.</param>
            <returns>XML representing the source.</returns>
        </member>
        <member name="P:ABB.SrcML.SrcMLGenerator.ExtensionMapping">
            <summary>
            Maps file extensions to the languages they will be parsed as.
            </summary>
        </member>
        <member name="P:ABB.SrcML.SrcMLGenerator.NonDefaultExecutables">
            <summary>
            Maps Languages to the Src2SrcMLRunner that will parse it, if different from the default.
            </summary>
        </member>
        <member name="P:ABB.SrcML.SrcMLGenerator.SupportedLanguages">
            <summary>
            The languages that can be parsed by this SrcMLGenerator.
            </summary>
        </member>
        <member name="T:ABB.SrcML.ITransform">
            <summary>
            Interface for SrcML transformations.
            </summary>
        </member>
        <member name="M:ABB.SrcML.ITransform.Query(System.Xml.Linq.XElement)">
            <summary>
            Find each matching element rooted at the given element.
            </summary>
            <param name="element">the rootUnit element</param>
            <returns>the matching elements</returns>
        </member>
        <member name="M:ABB.SrcML.ITransform.Transform(System.Xml.Linq.XElement)">
            <summary>
            Transform the given element. Typically, the input for this function should come from <see cref="T:ABB.SrcML.QueryAttribute"/>.
            <code lang="C#">
            foreach(var e in transform.QueryAttribute(element))
                e.ReplaceWith(transform.Transform(e);
            </code>
            </summary>
            <param name="element">the element to transform. Typically comes from <see cref="T:ABB.SrcML.QueryAttribute"/></param>
            <returns>a transformed version of the </returns>
        </member>
        <member name="T:ABB.SrcML.QueryAttribute">
            <summary>
            The Query attribute is used to identify SrcML Query functions that can be tested by the SrcML Preview Addin.
            <seealso cref="T:ABB.SrcML.QueryHarness"/>
            </summary>
        </member>
        <member name="T:ABB.SrcML.QueryHarness">
            <summary>
            QueryHarness is a test harness for methods with the <see cref="T:ABB.SrcML.QueryAttribute"/>. The test takes a type and a method to be tested.
            </summary>
        </member>
        <member name="M:ABB.SrcML.QueryHarness.#ctor(System.Type,System.String)">
            <summary>
            Instantiates a new QueryFunctionTestObject with <paramref name="type"/> and <paramref name="methodName"/>.
            </summary>
            <param name="type">The type to make a query function for</param>
            <param name="methodName">the method in <paramref name="type"/> to test</param>
        </member>
        <member name="M:ABB.SrcML.QueryHarness.#ctor(System.Type,System.Reflection.MethodInfo)">
            <summary>
            Instantiates a new QueryFunctionTestObject with <paramref name="type"/> and <paramref name="method"/>.
            </summary>
            <param name="type"></param>
            <param name="method"></param>
        </member>
        <member name="M:ABB.SrcML.QueryHarness.CreateFromType(System.Type)">
            <summary>
            Generates a QueryHarness object for each function in <paramref name="type"/> that has the <see cref="T:ABB.SrcML.QueryAttribute"/>
            and matches the <see cref="M:ABB.SrcML.ITransform.Query(System.Xml.Linq.XElement)"/> signature.
            </summary>
            <param name="type">The type to find queries in.</param>
            <returns>An IEnumerable of QueryHarness objects</returns>
        </member>
        <member name="M:ABB.SrcML.QueryHarness.ToString">
            <summary>
            Gives the full signature of the function being tested.
            </summary>
            <returns>The full signature &lt;return type&gt; &lt;type&gt;.&lt;function name&gt;(&lt;parameter list&gt;)</returns>
        </member>
        <member name="M:ABB.SrcML.QueryHarness.Query(System.Xml.Linq.XElement)">
            <summary>
            The query function takes the given type and executes its Query function.
            </summary>
            <param name="element"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.QueryHarness.Transform(System.Xml.Linq.XElement)">
            <summary>
            This just returns the input <paramref name="element"/>
            </summary>
            <param name="element">The XElement to transform</param>
            <returns><paramref name="element"/></returns>
        </member>
        <member name="T:ABB.SrcML.Src2SrcMLRunner">
            <summary>
            Utility class for running src2srcml.exe
            </summary>
        </member>
        <member name="T:ABB.SrcML.SrcMLRunner">
            <summary>
            Abstract class for controlling srcml executables (src2srcml, srcml2src, and srcdiff).
            </summary>
        </member>
        <member name="T:ABB.SrcML.Utilities.ExecutableRunner">
            <summary>
            Wrapper class for running executables with given command line arguments
            </summary>
        </member>
        <member name="M:ABB.SrcML.Utilities.ExecutableRunner.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Utilities.ExecutableRunner"/> class.
            </summary>
            <param name="applicationDirectory">The application directory.</param>
            <param name="executableName">Name of the executable.</param>
        </member>
        <member name="M:ABB.SrcML.Utilities.ExecutableRunner.Run(System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            Runs this executable with the specified arguments.
            </summary>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:ABB.SrcML.Utilities.ExecutableRunner.Run(System.String)">
            <summary>
            Runs this executable with the specified argument text.
            </summary>
            <param name="argumentText">The argument text.</param>
        </member>
        <member name="M:ABB.SrcML.Utilities.ExecutableRunner.Run(System.Collections.ObjectModel.Collection{System.String},System.String)">
            <summary>
            Runs this executable with the specified arguments and additional input passed in on standard input.
            </summary>
            <param name="arguments">The arguments.</param>
            <param name="standardInput">The standard input.</param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.Utilities.ExecutableRunner.Run(System.String,System.String)">
            <summary>
            Runs this executable with the specified argument text and additional input passed in on standard input.
            </summary>
            <param name="argumentText">The argument text.</param>
            <param name="standardInput">The standard input.</param>
            <returns></returns>
        </member>
        <member name="P:ABB.SrcML.Utilities.ExecutableRunner.ExecutableName">
            <summary>
            Gets or sets the name of the executable.
            </summary>
            <value>
            The name of the executable.
            </value>
        </member>
        <member name="P:ABB.SrcML.Utilities.ExecutableRunner.ApplicationDirectory">
            <summary>
            Gets or sets the application directory.
            </summary>
            <value>
            The application directory.
            </value>
        </member>
        <member name="P:ABB.SrcML.Utilities.ExecutableRunner.ExecutablePath">
            <summary>
            Gets the executable path.
            </summary>
        </member>
        <member name="M:ABB.SrcML.SrcMLRunner.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.SrcMLRunner"/> class.
            </summary>
            <param name="applicationDirectory">The application directory.</param>
            <param name="executableName">Name of the executable.</param>
            <param name="namespaceArguments">The namespace arguments.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLRunner.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.SrcMLRunner"/> class.
            </summary>
            <param name="applicationDirectory">The application directory.</param>
            <param name="executableName">Name of the executable.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLRunner.Run(System.String,System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            Runs this executable and places the output in the specified output file.
            This executable is run with the following string <c>[this.ExecutablePath] --register-ext [ExtensionMapping] --output=[outputfile] [addititionlArguments]</c>
            </summary>
            <param name="outputFile">The output file.</param>
            <param name="additionalArguments">The additional arguments.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLRunner.Run(System.String,System.Collections.ObjectModel.Collection{System.String},System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            Runs this executable and places the output in the specified output file. The inputs are written to a temporary file that is deleted when finished.
            This executable is run with the following string <c>[this.ExecutablePath] --register-ext [ExtensionMapping] --output=[outputfile] --files-from=[input file] [addititionlArguments]</c>
            </summary>
            <param name="outputFile">The output file.</param>
            <param name="additionalArguments">The additional arguments.</param>
            <param name="inputs">The inputs.</param>
        </member>
        <member name="P:ABB.SrcML.SrcMLRunner.ExtensionMapping">
            <summary>
            Mapping of source extensions to their languages.
            </summary>
        </member>
        <member name="P:ABB.SrcML.SrcMLRunner.TreatHeadersAsCPlusPlus">
            <summary>
            Gets or sets a value indicating whether to treat headers (.h files) as C plus plus].
            If this property is set to <c>false</c>, headers will be treated as C regardless of the language assigned to it
            </summary>
            <value>
            	<c>true</c> if [treat headers as C plus plus]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ABB.SrcML.SrcMLRunner.NamespaceArguments">
            <summary>
            Gets or sets the list of common namespace arguments
            </summary>
            <value>
            The namespace arguments.
            </value>
        </member>
        <member name="F:ABB.SrcML.Src2SrcMLRunner.Src2SrcMLExecutableName">
            <summary>
            The src2srcml executable name
            </summary>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Src2SrcMLRunner"/> class.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Src2SrcMLRunner"/> class.
            </summary>
            <param name="applicationDirectory">The application directory.</param>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Src2SrcMLRunner"/> class.
            </summary>
            <param name="applicationDirectory">The application directory.</param>
            <param name="namespaceArguments">The namespace arguments.</param>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner.GenerateSrcMLFromDirectory(System.String,System.String)">
            <summary>
            Generate a SrcML document from the given path and place it in the XML file.
            </summary>
            <param name="directoryPath">the directory path</param>
            <param name="xmlFileName">the path of the xml file</param>
            <returns>A SrcMLFile that points at <paramref name="xmlFileName"/></returns>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner.GenerateSrcMLFromDirectory(System.String,System.String,ABB.SrcML.Language)">
            <summary>
            Generates a SrcML document from the given path and place it in the XML file. The XML document will only contain files classified as <paramref name="languageFilter"/>.
            </summary>
            <param name="directoryPath">the directory path</param>
            <param name="xmlFileName">the path of the xml file</param>
            <param name="languageFilter">the language to filter on</param>
            <returns>A SrcMLFile that points at <paramref name="xmlFileName"/></returns>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner.GenerateSrcMLFromDirectory(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Generates a SrcML document from the given path and place it in the XML file. The XML document will only contain files not present in <paramref name="filesToExclude"/>
            </summary>
            <param name="directoryPath">the directory path</param>
            <param name="xmlFileName">the path of the xml file</param>
            <param name="filesToExclude">A collection of files to exclude from <paramref name="xmlFileName"/></param>
            <returns>A SrcMLFile that points at <paramref name="xmlFileName"/></returns>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner.GenerateSrcMLFromDirectory(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},ABB.SrcML.Language)">
            <summary>
            Generates a SrcML document from the given path and place it in the XML file.
            The output can be controlled by using <paramref name="filesToExclude"/>, and <paramref name="languageFilter"/>
            </summary>
            <param name="directoryPath">the directory path</param>
            <param name="xmlFileName">the path of the xml file</param>
            <param name="filesToExclude">A collection of files to exclude from <paramref name="xmlFileName"/></param>
            <param name="languageFilter">the language to filter on</param>
            <returns>A SrcMLFile that points at <paramref name="xmlFileName"/></returns>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner.GenerateSrcMLAndXElementFromFile(System.String,System.String)">
            <summary>
            Added by JZ on 12/4/2012
            Generate both a SrcML XElement and document from a single source file. The language will be inferred from the extension.
            </summary>
            <param name="sourceFileName">path to the source file to convert.</param>
            <param name="xmlFileName">The File name to write the resulting XML to.</param>
            <returns>An XElement representing the source.</returns>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner.GenerateSrcMLAndStringFromFile(System.String,System.String)">
            <summary>
            Added by JZ on 12/3/2012
            Generate both a SrcML string and document from a single source file. The language will be inferred from the extension.
            </summary>
            <param name="sourceFileName">path to the source file to convert.</param>
            <param name="xmlFileName">The File name to write the resulting XML to.</param>
            <returns>An XML string representing the source.</returns>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner.GenerateSrcMLFromFile(System.String,System.String)">
            <summary>
            Generate a SrcML document from a single source file. The language will be inferred from the extension.
            </summary>
            <param name="sourceFileName">path to the source file to convert.</param>
            <param name="xmlFileName">The File name to write the resulting XML to.</param>
            <returns>A SrcMLFile for <paramref name="xmlFileName"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner.GenerateSrcMLFromFile(System.String,System.String,ABB.SrcML.Language)">
            <summary>
            Generate a SrcML document from a single source file with the specified language.
            </summary>
            <param name="sourceFileName">The path to the source file to convert.</param>
            <param name="xmlFileName">The file name to write the resulting XML to.</param>
            <param name="language">The language to parse the source file as.</param>
            <returns>A SrcMLFile for <paramref name="xmlFileName"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner.GenerateSrcMLFromFiles(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Generates a SrcML document from a collection of source files. The languages will be inferred from the file extensions.
            </summary>
            <param name="sourceFileNames">The source files to generate SrcML from.</param>
            <param name="xmlFileName">The file name to write the resulting XML to.</param>
            <returns>A SrcMLFile for <paramref name="xmlFileName"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner.GenerateSrcMLFromFiles(System.Collections.Generic.IEnumerable{System.String},System.String,ABB.SrcML.Language)">
            <summary>
            Generates a SrcML document from a collection of source files using the specified language.
            </summary>
            <param name="sourceFileNames">The source files to generate SrcML from.</param>
            <param name="xmlFileName">The file name to write the resulting XML to.</param>
            <param name="language">The language to parse the source files as.</param>
            <returns>A SrcMLFile for <paramref name="xmlFileName"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner.GenerateSrcMLFromString(System.String)">
            <summary>
            Generate SrcML from a given string of source code. The source code will be parsed as C++.
            </summary>
            <param name="source">A string containing the source code to parse.</param>
            <returns>XML representing the source.</returns>
        </member>
        <member name="M:ABB.SrcML.Src2SrcMLRunner.GenerateSrcMLFromString(System.String,ABB.SrcML.Language)">
            <summary>
            Generate SrcML from a given string of source code.
            </summary>
            <param name="source">A string containing the source code to parse.</param>
            <param name="language">The language to parse the string as. Language.Any is not valid.</param>
            <returns>XML representing the source.</returns>
        </member>
        <member name="T:ABB.SrcML.SrcML">
            <summary>
            This is a utility class for generating SrcML files. It has functions that use the original SrcML executables,
            and some native C# functions for generating SrcML.
            </summary>
        </member>
        <member name="F:ABB.SrcML.SrcML.Src2SrcMLExecutableName">
            <summary>executable name for src2srcml executable</summary>
        </member>
        <member name="F:ABB.SrcML.SrcML.SrcML2SrcExecutableName">
            <summary>executable name for ExtractSourceFile executable</summary>
        </member>
        <member name="M:ABB.SrcML.SrcML.#ctor">
            <summary>
            Creates a new SrcML object rooted in a default directory. If the SRCMLBINDIR environment variable is set, that is used.
            If not, then c:\Program Files (x86)\SrcML\bin is used.
            If that doesn't exist, c:\Program Files\SrcML\bin is used.
            
            If none of these directories is sued, the current directory is used.
            <seealso cref="M:ABB.SrcML.SrcML.#ctor(System.String)"/>
            </summary>
        </member>
        <member name="M:ABB.SrcML.SrcML.#ctor(System.String)">
            <summary>
            Creates a new SrcML object rooted in the given directory.
            </summary>
            <param name="binDirectory">The path to the directory containing the SrcML executables.</param>
        </member>
        <member name="M:ABB.SrcML.SrcML.GenerateSrcMLFromString(System.String)">
            <summary>
            Generate SrcML from a given string of source code. The source code will be parsed as C++.
            </summary>
            <param name="source">A string containing the source code to parse.</param>
            <returns>XML representing the source.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcML.GenerateSrcMLFromString(System.String,ABB.SrcML.Language)">
            <summary>
            Generate SrcML from a given string of source code.
            </summary>
            <param name="source">A string containing the source code to parse.</param>
            <param name="language">The source language to use (C,C++,Java,AspectJ).
            If the source languageFilter is either not in this list or is null, the default source language (C++) will be used.</param>
            <returns>XML representing the source.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcML.GenerateSrcMLFromFile(System.String,System.String)">
            <summary>
            Generate a SrcML document from a single source file. The language will be inferred from the extension.
            </summary>
            <param name="sourceFileName">path to the source file to convert.</param>
            <param name="xmlFileName">The File name to write the resulting XML to.</param>
            <returns>A SrcMLFile for <paramref name="xmlFileName"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcML.GenerateSrcMLFromFile(System.String,System.String,ABB.SrcML.Language)">
            <summary>
            Generate a SrcML document from a single source file with the specified language.
            </summary>
            <param name="sourceFileName">The path to the source file to convert.</param>
            <param name="xmlFileName">The file name to write the resulting XML to.</param>
            <param name="language">The language to parse the source file as.</param>
            <returns>A SrcMLFile for <paramref name="xmlFileName"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcML.GenerateSrcMLFromProject(System.String)">
            <summary>
            Generate a SrcML file for the given Visual Studio project. The resulting XML
            will be written to a file with the same name as the Visual Studio project
            <seealso cref="M:ABB.SrcML.SrcML.GenerateSrcMLFromProject(System.String,System.String)"/>
            </summary>
            <param name="project">The path to the Visual Studio project file.</param>
            <returns>A SrcMLFile based on the project.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcML.GenerateSrcMLFromProject(System.String,System.String)">
            <summary>
            Generate a SrcML file from the Visual Studio project file with the language C++.
            </summary>
            <param name="project">The path to the Visual Studo project file.</param>
            <param name="xmlFileName">The file name to write the resulting XML to.</param>
            <returns>a SrcMLFile for <paramref name="xmlFileName"/></returns>
        </member>
        <member name="M:ABB.SrcML.SrcML.GenerateSrcMLFromProject(System.String,System.String,ABB.SrcML.Language)">
            <summary>
            Generate a SrcML file from the Visual Studio project file, with the given language.
            </summary>
            <param name="project">The path to the Visual Studo project file.</param>
            <param name="xmlFileName">The file name to write the resulting XML to.</param>
            <param name="language">The source language to use (C,C++,Java,AspectJ)</param>
            <returns>a SrcMLFile for <paramref name="xmlFileName"/></returns>
        </member>
        <member name="M:ABB.SrcML.SrcML.GenerateSrcMLFromDirectory(System.String,System.String)">
            <summary>
            Generate a SrcML document from the given path and place it in the XML file.
            </summary>
            <param name="directoryPath">the directory path</param>
            <param name="xmlFileName">the path of the xml file</param>
            <returns>A SrcMLFile that points at <paramref name="xmlFileName"/></returns>
        </member>
        <member name="M:ABB.SrcML.SrcML.GenerateSrcMLFromDirectory(System.String,System.String,ABB.SrcML.Language)">
            <summary>
            Generates a SrcML document from the given path and place it in the XML file. The XML document will only contain files classified as <paramref name="languageFilter"/>.
            </summary>
            <param name="directoryPath">the directory path</param>
            <param name="xmlFileName">the path of the xml file</param>
            <param name="languageFilter">the language to filter on</param>
            <returns>A SrcMLFile that points at <paramref name="xmlFileName"/></returns>
        </member>
        <member name="M:ABB.SrcML.SrcML.GenerateSrcMLFromDirectory(System.String,System.String,System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            Generates a SrcML document from the given path and place it in the XML file. The XML document will only contain files not present in <paramref name="filesToExclude"/>
            </summary>
            <param name="directoryPath">the directory path</param>
            <param name="xmlFileName">the path of the xml file</param>
            <param name="filesToExclude">A collection of files to exclude from <paramref name="xmlFileName"/></param>
            <returns>A SrcMLFile that points at <paramref name="xmlFileName"/></returns>
        </member>
        <member name="M:ABB.SrcML.SrcML.GenerateSrcMLFromDirectory(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},ABB.SrcML.Language)">
            <summary>
            Generates a SrcML document from the given path and place it in the XML file.
            The output can be controlled by using <paramref name="filesToExclude"/>, and <paramref name="languageFilter"/>
            </summary>
            <param name="directoryPath">the directory path</param>
            <param name="xmlFileName">the path of the xml file</param>
            <param name="filesToExclude">A collection of files to exclude from <paramref name="xmlFileName"/></param>
            <param name="languageFilter">the language to filter on</param>
            <returns>A SrcMLFile that points at <paramref name="xmlFileName"/></returns>
        </member>
        <member name="M:ABB.SrcML.SrcML.ExtractSourceFile(ABB.SrcML.SrcMLFile,System.Int32)">
            <summary>
            Runs the srcml2src.exe executable on the given SrcML document, and extracts the specific filename.
            <para>It's probably better to use the <see cref="!:Extensions.ToSource(XElement)"/> function, as it does not require starting a new process.</para>
            </summary>
            <param name="doc">The SrcML document to query.</param>
            <param name="unitIndex">The index number of the SrcML document.</param>
            <returns>The source code.</returns>
            TODO change this to use AbstractDocument and use the new srcml2src that comes with srcdiff (remove the suppressmessage after)
        </member>
        <member name="M:ABB.SrcML.SrcML.ExtractSourceFile(ABB.SrcML.SrcMLFile,System.String)">
            <summary>
            Takes the given <paramref name="fileName"/> in <paramref name="doc"/> and returns the original source code.
            <para>Instead of this, use <see cref="!:Extensions.ToSource(XElement,int)"/>.</para>
            <seealso cref="M:ABB.SrcML.SrcML.ExtractSourceFile(ABB.SrcML.SrcMLFile,System.Int32)"/>
            </summary>
            <param name="doc">The SrcML document to query.</param>
            <param name="fileName">The file name to search for.</param>
            <returns>A string with the original source code.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcML.getParentStatement(System.Xml.Linq.XElement)">
            <summary>
            Gets the parent statement for the given element.
            </summary>
            <param name="element">The element to find the parent of.</param>
            <returns>The parent element for <paramref name="element"/>. It will be either <see cref="F:ABB.SrcML.SRC.ExpressionStatement"/> or <see cref="F:ABB.SrcML.SRC.DeclarationStatement"/></returns>
        </member>
        <member name="M:ABB.SrcML.SrcML.GenerateSrcMLFromString(System.String,System.String)">
            <summary>
            Generate SrcML from a given string of source code.
            </summary>
            <param name="source">A string containing the source code to parse.</param>
            <param name="language">The source language to use (C,C++,Java,AspectJ).
            If the source langauge is either not in this list or is null, the default source language (C++) will be used.</param>
            <returns>XML representing the source.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcML.GenerateSrcMLFromFile(System.String,System.String,System.String)">
            <summary>
            Generate a SrcML document from a single source file with the specified language.
            </summary>
            <param name="sourceFileName">The path to the source file to convert.</param>
            <param name="xmlFileName">The file name to write the resulting XML to.</param>
            <param name="language">The language to parse the source file as.</param>
            <returns>A SrcMLFile for <paramref name="xmlFileName"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcML.GenerateSrcMLFromProject(System.String,System.String,System.String)">
            <summary>
            Generate a SrcML file from the Visual Studio project file, with the given languageFilter.
            </summary>
            <param name="project">The path to the Visual Studo project file.</param>
            <param name="xmlFileName">The file name to write the resulting XML to.</param>
            <param name="language">The source language to use (C,C++,Java,AspectJ)</param>
            <returns>a SrcMLFile for <paramref name="xmlFileName"/></returns>
        </member>
        <member name="M:ABB.SrcML.SrcML.GenerateSrcMLFromDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Generate a SrcML file from the given directory.
            </summary>
            <param name="path">The path to the source directory.</param>
            <param name="xmlFileName">The path to write the resulting XML to.</param>
            <param name="overrideJava">If true, parse Java files as C++</param>
            <returns>A SrcMLFile for <paramref name="xmlFileName"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcML.GenerateSrcMLFromDirectory(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Generate a SrcML file from the given directory, with the given languageFilter.
            Only source files for the given languageFilter are included in the output.
            </summary>
            <param name="path">The path to the source directory.</param>
            <param name="xmlFileName">The path to write the resulting XML to.</param>
            <param name="language">The language to find files for.</param>
            <param name="overrideJava">if true, parse Java files as C++</param>
            <returns>A SrcMLFile for <paramref name="xmlFileName"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcML.GenerateSrcMLFromDirectory(System.String,System.String,System.String,System.Boolean,System.Collections.Generic.List{System.String})">
            <summary>
            Generate a SrcML file from the given directory, with the given languageFilter.
            Only source files for the given languageFilter are included in the output.
            </summary>
            <param name="path">The path to the source directory.</param>
            <param name="xmlFileName">The path to write the resulting XML to.</param>
            <param name="language">The language to find files for.</param>
            <param name="overrideJava">if true, parse Java files as C++</param>
            <param name="fileExclusionList">List of files to exclude. This is accomplished via simple string matching; so the entire file path should be used.</param>
            <returns>A SrcMLFile for <paramref name="xmlFileName"/>.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcML.GenerateSrcMLFromDirectory(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Generate a SrcML file from the given directory.
            </summary>
            <param name="path">The path to the source directory.</param>
            <param name="xmlFileName">The path to write the resulting XML to.</param>
            <param name="overrideJava">If true, parse Java files as C++</param>
            <param name="exclusionListFile">A list of files to exclude from the SrcML document. If null; exclude no files.</param>
            <returns>A SrcMLFile for <paramref name="xmlFileName"/>.</returns>
        </member>
        <member name="P:ABB.SrcML.SrcML.ExtensionMapping">
            <summary>
            Mapping of source extensions to their languages.
            </summary>
        </member>
        <member name="P:ABB.SrcML.SrcML.DefaultNamespaceArguments">
            <summary>
            List of common name space arguments that src2srcml.exe uses to modify its output.
            </summary>
        </member>
        <member name="P:ABB.SrcML.SrcML.SrcMLDirectory">
            <summary>
            Gets the directory that src2srcml and ExtractSourceFile can be found in
            </summary>
        </member>
        <member name="P:ABB.SrcML.SrcML.NamespaceManager">
            <summary>
            Gets the default XmlNamespaceManager that contains all of the SrcML namespaces
            </summary>
        </member>
        <member name="T:ABB.SrcML.SrcML2SrcRunner">
            <summary>
            Utility class for running srcml2src.exe
            </summary>
        </member>
        <member name="F:ABB.SrcML.SrcML2SrcRunner.SrcML2SrcExecutableName">
            <summary>
            The srcml2src executable name
            </summary>
        </member>
        <member name="M:ABB.SrcML.SrcML2SrcRunner.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.SrcML2SrcRunner"/> class.
            </summary>
        </member>
        <member name="M:ABB.SrcML.SrcML2SrcRunner.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.SrcML2SrcRunner"/> class.
            </summary>
            <param name="applicationDirectory">The application directory.</param>
        </member>
        <member name="M:ABB.SrcML.SrcML2SrcRunner.ExtractSource(System.String,System.String,System.Int32)">
            <summary>
            Extracts the source.
            </summary>
            <param name="xmlFileName">Name of the XML file.</param>
            <param name="outputFileName">Name of the output file.</param>
            <param name="unitIndex">Index of the unit.</param>
        </member>
        <member name="T:ABB.SrcML.SrcMLArchive">
            <summary>
            This is an implementation of <see cref="T:ABB.SrcML.AbstractArchive"/>. File changes trigger the addition, update, and deletion of srcML archives in
            the archive directory
            </summary>
        </member>
        <member name="M:ABB.SrcML.SrcMLArchive.#ctor(System.String)">
            <summary>
            Creates a new SrcMLArchive. The archive is created in <c>"baseDirectory\srcML"</c>.
            </summary>
            <param name="baseDirectory">the base directory</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLArchive.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new SrcMLArchive. The archive is created in <c>"baseDirectory\srcML"</c>.
            </summary>
            <param name="baseDirectory">the base directory</param>
            <param name="useExistingSrcML">If True, any existing SrcML files in <see cref="P:ABB.SrcML.AbstractArchive.ArchivePath"/> will be used. If False, these files will be deleted and potentially recreated.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLArchive.#ctor(System.String,System.Boolean,ABB.SrcML.SrcMLGenerator)">
            <summary>
            Creates a new SrcMLArchive. The archive is created in <c>"baseDirectory\srcML"</c>.
            </summary>
            <param name="baseDirectory">the base directory</param>
            <param name="useExistingSrcML">If True, any existing SrcML files in <see cref="P:ABB.SrcML.AbstractArchive.ArchivePath"/> will be used. If False, these files will be deleted and potentially recreated.</param>
            <param name="generator">The SrcMLGenerator to use to convert source files to SrcML.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLArchive.#ctor(System.String,System.Boolean,ABB.SrcML.SrcMLGenerator,ABB.SrcML.XmlFileNameMapping)">
            <summary>
            Creates a new SrcMLArchive. The archive is created in <c>"baseDirectory\srcML"</c>.
            </summary>
            <param name="baseDirectory">the base directory</param>
            <param name="useExistingSrcML">If True, any existing SrcML files in <see cref="P:ABB.SrcML.AbstractArchive.ArchivePath"/> will be used. If False, these files will be deleted and potentially recreated.</param>
            <param name="generator">The SrcMLGenerator to use to convert source files to SrcML.</param>
            <param name="xmlMapping">The XmlFileNameMapping to use to map source paths to xml file paths.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLArchive.#ctor(System.String,System.String)">
            <summary>
            Creates a new SrcMLArchive. By default, any existing srcML will be used.
            </summary>
            <param name="baseDirectory">The parent of <paramref name="srcMLDirectory"/>. <see cref="P:ABB.SrcML.AbstractArchive.ArchivePath"/> will be set to <c>Path.Combine(baseDirectory, srcMLDirectory)</c></param>
            <param name="srcMLDirectory">The directory to store the SrcML files in. This will be created as a subdirectory of <paramref name="baseDirectory"/></param>
        </member>
        <member name="M:ABB.SrcML.SrcMLArchive.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new SrcMLArchive.
            </summary>
            <param name="baseDirectory">The parent of <paramref name="srcMLDirectory"/>. <see cref="P:ABB.SrcML.AbstractArchive.ArchivePath"/> will be set to <c>Path.Combine(baseDirectory, srcMLDirectory)</c></param>
            <param name="srcMLDirectory">The directory to store the SrcML files in. This will be created as a subdirectory of <paramref name="baseDirectory"/></param>
            <param name="useExistingSrcML">If True, any existing SrcML files in <see cref="P:ABB.SrcML.AbstractArchive.ArchivePath"/> will be used. If False, these files will be deleted and potentially recreated.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLArchive.#ctor(System.String,System.String,System.Boolean,ABB.SrcML.SrcMLGenerator)">
            <summary>
            Creates a new SrcMLArchive.
            </summary>
            <param name="baseDirectory">The parent of <paramref name="srcMLDirectory"/>. <see cref="P:ABB.SrcML.AbstractArchive.ArchivePath"/> will be set to <c>Path.Combine(baseDirectory, srcMLDirectory)</c></param>
            <param name="srcMLDirectory">The directory to store the SrcML files in. This will be created as a subdirectory of <paramref name="baseDirectory"/></param>
            <param name="useExistingSrcML">If True, any existing SrcML files in <see cref="P:ABB.SrcML.AbstractArchive.ArchivePath"/> will be used. If False, these files will be deleted and potentially recreated.</param>
            <param name="generator">The SrcMLGenerator to use to convert source files to SrcML.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLArchive.#ctor(System.String,System.String,System.Boolean,ABB.SrcML.SrcMLGenerator,ABB.SrcML.XmlFileNameMapping,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Creates a new SrcMLArchive.
            </summary>
            <param name="baseDirectory">The parent of <paramref name="srcMLDirectory"/>. <see cref="P:ABB.SrcML.AbstractArchive.ArchivePath"/> will be set to <c>Path.Combine(baseDirectory, srcMLDirectory)</c></param>
            <param name="srcMLDirectory">The directory to store the SrcML files in. This will be created as a subdirectory of <paramref name="baseDirectory"/></param>
            <param name="useExistingSrcML">If True, any existing SrcML files in <see cref="P:ABB.SrcML.AbstractArchive.ArchivePath"/> will be used. If False, these files will be deleted and potentially recreated.</param>
            <param name="generator">The SrcMLGenerator to use to convert source files to SrcML.</param>
            <param name="xmlMapping">The XmlFileNameMapping to use to map source paths to xml file paths.</param>
            <param name="scheduler">The task scheduler to for asynchronous tasks</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLArchive.Dispose">
            <summary>
            Disposes of the internal <see cref="T:ABB.SrcML.XmlFileNameMapping"/> and then calls <see cref="M:ABB.SrcML.AbstractArchive.Dispose"/>
            </summary>
        </member>
        <member name="M:ABB.SrcML.SrcMLArchive.AddOrUpdateFileImpl(System.String)">
            <summary>
            Generates srcML for <paramref name="fileName"/>.
            If the file already exists in the archive, The <see cref="E:ABB.SrcML.AbstractArchive.FileChanged"/> event is thrown with with <see cref="F:ABB.SrcML.FileEventType.FileChanged"/>.
            Otherwise, <see cref="E:ABB.SrcML.AbstractArchive.FileChanged"/> is thrown with <see cref="F:ABB.SrcML.FileEventType.FileAdded"/>.
            </summary>
            <param name="fileName">The file name to generate srcML for</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLArchive.ContainsFile(System.String)">
            <summary>
            Checks to see if the file has a companions srcML file in the archive
            </summary>
            <param name="fileName">the file to check for</param>
            <returns>true if the file is in the archive; false otherwise</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLArchive.DeleteFileImpl(System.String)">
            <summary>
            Deletes <paramref name="fileName"/> from the archive and raises <see cref="E:ABB.SrcML.AbstractArchive.FileChanged"/> with <see cref="F:ABB.SrcML.FileEventType.FileDeleted"/>.
            </summary>
            <param name="fileName">The file name to delete</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLArchive.GetFiles">
            <summary>
            Gets all of the source file names stored in this archive
            </summary>
            <returns>an enumerable of file names stored in this archive</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLArchive.IsOutdated(System.String)">
            <summary>
            Checks if the srcML stored in the archive is up to date with the source file.
            If the file is not in the archive, it is outdated
            </summary>
            <param name="fileName">the file name to check</param>
            <returns>true if the source file is newer OR older than its srcML file in the archive or the file is not in the archive.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLArchive.RenameFileImpl(System.String,System.String)">
            <summary>
            Renames the file from <paramref name="oldFileName"/> to <paramref name="newFileName"/>. When complete, it raises <see cref="E:ABB.SrcML.AbstractArchive.FileChanged"/> with <see cref="F:ABB.SrcML.FileEventType.FileRenamed"/>.
            </summary>
            <param name="oldFileName">The old file name</param>
            <param name="newFileName">The new file name.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLArchive.IsValidFileExtension(System.String)">
            <summary>
            Check if the file extension is in the set of file types that can be processed by SrcML.NET.
            </summary>
            <param name="filePath">The file name to check.</param>
            <returns>True if the file can be converted to SrcML; False otherwise.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLArchive.GenerateXmlForSource(System.String)">
            <summary>
            Generate a srcML File for a source code file. Now use this method instead of GenerateXmlAndXElementForSource()
            </summary>
            <param name="sourcePath"></param>
        </member>
        <member name="M:ABB.SrcML.SrcMLArchive.ConcurrentGenerateXmlForSource(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Concurrency Generate SrcML from source file: ZL 03/11/2013
            </summary>
            <param name="listOfSourcePath"></param>
            <param name="levelOfConcurrency"></param>
        </member>
        <member name="M:ABB.SrcML.SrcMLArchive.DeleteXmlForSourceFile(System.String)">
            <summary>
            Delete the srcML file for a specified source file.
            </summary>
            <param name="sourcePath"></param>
        </member>
        <member name="M:ABB.SrcML.SrcMLArchive.GetXmlPath(System.String)">
            <summary>
            Returns the corresponding srcML file path for the given source file.
            </summary>
            <param name="sourcePath"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLArchive.GetSourcePathForXmlPath(System.String)">
            <summary>
            Get the corresponding source file path for a specific srcML file.
            </summary>
            <param name="xmlPath"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLArchive.GetXElementForSourceFile(System.String)">
            <summary>
            Gets the XElement for the specified source file. If the SrcML does not already exist in the archive, it will be created.
            </summary>
            <param name="sourceFilePath">The source file to get the root XElement for.</param>
            <returns>The root XElement of the source file.</returns>
        </member>
        <member name="P:ABB.SrcML.SrcMLArchive.XmlGenerator">
            <summary>
            The SrcML generator used to generate srcML
            </summary>
        </member>
        <member name="P:ABB.SrcML.SrcMLArchive.FileUnits">
            <summary>
            Enumerates over each file in the archive and returns a file unit
            </summary>
        </member>
        <member name="P:ABB.SrcML.SrcMLArchive.SupportedExtensions">
            <summary>
            The list of extensions supported by the archive (taken from <see cref="P:ABB.SrcML.SrcMLArchive.XmlGenerator"/>)
            </summary>
        </member>
        <member name="T:ABB.SrcML.SrcMLFile">
            <summary>
            This class represents a SrcMLFile. The underlying data is stored in an XML file, and can be accessed in a number of ways.
            </summary>
        </member>
        <member name="M:ABB.SrcML.SrcMLFile.#ctor(ABB.SrcML.SrcMLFile)">
            <summary>
            Instantiates a new SrcMLFile with the characteristics of another SrcMLFile.
            </summary>
            <param name="other">The SrcMLFile to copy.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLFile.#ctor(System.String)">
            <summary>
            Instantiates new SrcML file based on the given file.
            </summary>
            <param name="fileName">The file to read from.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLFile.Merge(ABB.SrcML.SrcMLFile,System.String)">
            <summary>
            Merges this SrcMLFile with another SrcMLFile. 
            </summary>
            <param name="other">The second SrcML File to merge with.</param>
            <param name="outputFileName">The path to write the resulting SrcMLFile to.</param>
            <returns>The newly merged SrcMLFile.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLFile.RelativePath(System.Xml.Linq.XNode)">
            <summary>
            Get the file path relative to <see cref="P:ABB.SrcML.SrcMLFile.ProjectDirectory"/> for the unit containing the given node.
            </summary>
            <param name="node">The node.</param>
            <returns>The relative file path to that node.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLFile.GetXDocument">
            <summary>
            Get this SrcML file as an XDocument. This should not be used on very large SrcML file as it
            loads the entire XML file into memory.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLFile.QueryEachUnit(ABB.SrcML.ITransform)">
            <summary>
            Works in conjunction with <see cref="P:ABB.SrcML.AbstractDocument.FileUnits"/> to execute a query against each file in a SrcML document
            </summary>
            <param name="transform">The transform object with the <see cref="M:ABB.SrcML.ITransform.Query(System.Xml.Linq.XElement)"/></param>
            <returns>yields each node that matches the query in <paramref name="transform"/></returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLFile.Save(System.String,System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Writes this SrcML file to <paramref name="fileName"/> with changes stored in <paramref name="changedFiles"/>.
            Currently, this only handles changes to existing files. New files will be ignored.
            </summary>
            <param name="fileName">The file to write to. If it exists it will be deleted and replaced.</param>
            <param name="changedFiles">A list of units with changes. These will be substituted for the original units.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLFile.Save(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Writes changes to this SrcML file back to the current file (<see cref="P:ABB.SrcML.AbstractDocument.FileName"/>).
            <seealso cref="M:ABB.SrcML.SrcMLFile.Save(System.String,System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})"/>
            </summary>
            <param name="changedFiles">a list of units with changes. These will be substituted for the original units</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLFile.Save(System.String)">
            <summary>
            Writes this SrcML file to <paramref name="fileName"/> without making any changes.
            <para>This is identical to <c>srcmlDoc.Save(fileName, Enumerable.Empty&lt;XElement&gt;()</c></para>
            <seealso cref="M:System.Linq.Enumerable.Empty``1"/>
            </summary>
            <param name="fileName">the file to write to. If it exists it will be deleted and replaced.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLFile.Write(System.String)">
            <summary>
            Saves the document to the file. This uses <see cref="T:System.Xml.Linq.XDocument"/>, which is more memory intensive.
            <seealso cref="M:System.Xml.Linq.XDocument.Save(System.String)"/>
            </summary>
            <param name="fileName">The filename to write to.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLFile.Write">
            <summary>
            Writes the document back to the current file <see cref="P:ABB.SrcML.AbstractDocument.FileName"/>.
            <seealso cref="M:ABB.SrcML.SrcMLFile.Write(System.String)"/>
            </summary>
        </member>
        <member name="M:ABB.SrcML.SrcMLFile.IndexOfUnit(System.String)">
            <summary>
            Gets the index number of a given filename from the SrcML document.
            If this is being passed to SrcML.ExtractSourceFile(), +1 must be added to it.
            </summary>
            <param name="fileName">The filename to get an index for.</param>
            <returns>the index of the file. -1 if not found.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLFile.WriteXmlnsAttributes(System.Xml.XmlWriter)">
            <summary>
            Write attribute strings for each SrcML namespace to the given XmlWriter. This should be called immediately after XmlWriter.WriteStartElement.
            </summary>
            <param name="writer">Instance of XmlWriter to write to.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLFile.GetXMLString">
            <summary>
            Added by JZ on 12/3/2012
            Read the srcML file and generate a string of the content of this file.
            </summary>
            <returns>The string of the content of this file.</returns>
        </member>
        <member name="P:ABB.SrcML.SrcMLFile.ProjectDirectory">
            <summary>
            The project rootUnit directory for this SrcMLFile.
            </summary>
            <value>The ProjectDirectory property gets &amp; sets the rootUnit directory for this SrcMLFile.</value>
        </member>
        <member name="T:ABB.SrcML.SrcMLHelper">
            <summary>
            Collection of helper functions for working with srcML elements
            </summary>
        </member>
        <member name="M:ABB.SrcML.SrcMLHelper.GetSrcMLDefaultDirectory">
            <summary>
            Gets the default srcML binary directory. It checks the following conditions:
            1. If the SRCMLBINDIR environment variable is set, then that is used.
            2. If c:\Program Files (x86)\SrcML\bin directory exists (should only exist on 64-bit systems), then that is used.
            3. If c:\Program Files\SrcML\bin directory exists, then that is used.
            4. If none of the above is true, then the current directory is used.
            
            This function does not check that any of the paths actually contains the srcML executables.
            </summary>
            <returns>The default srcML binary directory.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLHelper.GetSrcMLDefaultDirectory(System.String)">
            <summary>
            Returns the default srcML binary directory.
            </summary>
            <param name="extensionDirectory"></param>
            <returns></returns>
        </member>
        <member name="T:ABB.SrcML.Query">
            <summary>
            A delegate for SrcML query functions.
            </summary>
            <param name="element">The XML node to query from.</param>
            <returns>A list of matching nodes from <paramref name="element"/>.</returns>
        </member>
        <member name="T:ABB.SrcML.Transform">
            <summary>
            A delegate for SrcML transform functions.
            </summary>
            <param name="element">the element to transform</param>
        </member>
        <member name="T:ABB.SrcML.TransformObjectHarness">
            <summary>
            TransformObjectHarness is a test harness for testing objects that implement the <see cref="T:ABB.SrcML.ITransform"/> interface.
            </summary>
        </member>
        <member name="M:ABB.SrcML.TransformObjectHarness.#ctor(System.Type)">
            <summary>
            Instantiates a new QueryFunctionTestObject for <paramref name="type"/>.
            </summary>
            <param name="type">The type to create a Test object for.</param>
        </member>
        <member name="M:ABB.SrcML.TransformObjectHarness.ToString">
            <summary>
            Returns the type being tested.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.TransformObjectHarness.Query(System.Xml.Linq.XElement)">
            <summary>
            Instantiates the object under test and then executes its query function.
            </summary>
            <param name="element">The XElement to query</param>
            <returns>an IEnumerable of the results</returns>
        </member>
        <member name="M:ABB.SrcML.TransformObjectHarness.Transform(System.Xml.Linq.XElement)">
            <summary>
            Instantiates the object under test and then executes its transform function.
            </summary>
            <param name="element">The XElement to transform</param>
            <returns>The transformed version of <paramref name="element"/></returns>
        </member>
        <member name="T:ABB.SrcML.TransformRunner">
            <summary>
            This class is a wrapper for querying and transforming a document using an ITransform.
            </summary>
        </member>
        <member name="M:ABB.SrcML.TransformRunner.RunQuery(ABB.SrcML.SrcMLFile,ABB.SrcML.ITransform)">
            <summary>
            Run the query against the given document.
            </summary>
            <param name="document">The document to query.</param>
            <param name="transform">The transform containing the Query.</param>
            <returns>The list of matching nodes.</returns>
        </member>
        <member name="M:ABB.SrcML.TransformRunner.RunTransform(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},ABB.SrcML.ITransform)">
            <summary>
            Runs the transform against the list of elements.
            </summary>
            <param name="elements">The elements to transform.</param>
            <param name="transform">The transform containing the <see cref="M:ABB.SrcML.ITransform.Transform(System.Xml.Linq.XElement)"/>.</param>
            <returns>The list of transformed nodes.</returns>
        </member>
        <member name="T:ABB.SrcML.Utilities.Base32">
            <summary>
            Base32 encoding and decoding.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Utilities.Base32.ToBase32String(System.String)">
            <summary>
            Converts a string of bytes to a Base32-k string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.Utilities.Base32.ToBase32String(System.Byte[])">
            <summary>
            Converts an array of bytes to a Base32-k string.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Utilities.Base32.FromBase32String(System.String)">
            <summary>
            Converts a Base32-k string into an array of bytes.
            </summary>
            <exception cref="T:System.ArgumentException">
            Input string <paramref name="str">str</paramref> contains invalid Base32-k characters.
            </exception>
        </member>
        <member name="T:ABB.SrcML.Utilities.DefaultsDictionary`2">
            <summary>
            DefaultsDictionary is a dictionary that starts with a list of default keys and values.
            For functions that return only a single key, value, or Key-Value Pair, the method will first check its collection of non-default values. Then, it will check its collection of *default* values.
            
            For functions that return a collection or enumerator, the WillReturnDefaultValues flag controls whether or not default values are returned. If false (the default), default values are *not* returned.
            This means that a DefaultsDictionary that consists of only default Key-Value Pairs will return an empty enumerator/collection.
            </summary>
            <typeparam name="TKey">The Key</typeparam>
            <typeparam name="TValue">The Value</typeparam>
        </member>
        <member name="M:ABB.SrcML.Utilities.DefaultsDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Boolean)">
            <summary>
            Constructs a new defaults dictionary.
            </summary>
            <param name="defaultDictionary">the initial dictionary of defaultsDictionary</param>
            <param name="willReturnDefaultValues">true if it should return default values in collections and enumerators</param>
        </member>
        <member name="M:ABB.SrcML.Utilities.DefaultsDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Constructs a new defaults dictionary.
            WillReturnDefaultValues is set to false by default.
            </summary>
            <param name="defaultDictionary">the initial dictionary of defaultsDictionary</param>
        </member>
        <member name="M:ABB.SrcML.Utilities.DefaultsDictionary`2.Add(`0,`1)">
            <summary>
            Adds the key to the non-default set of key-value pairs
            </summary>
            <param name="key">the key to add</param>
            <param name="value">the value corresponding to the key</param>
        </member>
        <member name="M:ABB.SrcML.Utilities.DefaultsDictionary`2.ContainsKey(`0)">
            <summary>
            ContainsKey returns true if there is either a default or non-default key that matches <paramref name="key"/>.
            </summary>
            <param name="key">the key to search for</param>
            <returns>true if the key is present; false otherwise</returns>
        </member>
        <member name="M:ABB.SrcML.Utilities.DefaultsDictionary`2.Remove(`0)">
            <summary>
            Removes the given key from the dictionary only if it is not in the initial set of defaults
            </summary>
            <param name="key">The key to remove</param>
            <returns>true if the key was removed</returns>
        </member>
        <member name="M:ABB.SrcML.Utilities.DefaultsDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value for the  given key from the set of non-default KVPs and default KVPs.
            </summary>
            <param name="key">the key to find</param>
            <param name="value">the value related to <paramref name="key"/></param>
            <returns>true  if the Key-Value pair was present, false otherwise.</returns>
        </member>
        <member name="M:ABB.SrcML.Utilities.DefaultsDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds a new Key-Value Pair to the non-default set
            </summary>
            <param name="item">The Key-Value Pair to add.</param>
        </member>
        <member name="M:ABB.SrcML.Utilities.DefaultsDictionary`2.Clear">
            <summary>
            Clears the non-default values from the dictionary
            </summary>
        </member>
        <member name="M:ABB.SrcML.Utilities.DefaultsDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Checks whether or not the given item is present in the dictionary. First, the non-default KVPs are checked, followed by the default KVPs.
            </summary>
            <param name="item">The item to check for</param>
            <returns>True if the item is contained in this dictionary</returns>
        </member>
        <member name="M:ABB.SrcML.Utilities.DefaultsDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the Key-Value Pairs to the specified array. If WillReturnDefaultValues is true, then this copies all of the non-default KVPs, followed by any default KVPs.
            </summary>
            <param name="array">The array to copy to</param>
            <param name="arrayIndex">The array index to start copying at</param>
        </member>
        <member name="M:ABB.SrcML.Utilities.DefaultsDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the given Key-Value Pair from the list of non-default Key-Value Pairs; false otherwise.
            This will return false if the Key-Value Pair is a default value.
            </summary>
            <param name="item">The Key-Value pair to remove</param>
            <returns>true if the item was removed; false otherwise</returns>
        </member>
        <member name="M:ABB.SrcML.Utilities.DefaultsDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator over the contents of this dictionary. If WillReturnDefaultValues is true, this will include both default &amp; non-default options.
            If WillReturnDefaultValues is false, this will include only default options.
            </summary>
            <returns>The enumerator</returns>
        </member>
        <member name="P:ABB.SrcML.Utilities.DefaultsDictionary`2.WillReturnDefaultValues">
            <summary>
            This boolean determines whether or not enumerators, iterators, etc will return both default and non-default values.
            If true, then default values will be returned as long as a non-default value is not present.
            If false, then only changed values will be returned in iterators.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Utilities.DefaultsDictionary`2.NonDefaultValueCount">
            <summary>
            The number of non-default Key-Value Pairs present in this dictionary.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Utilities.DefaultsDictionary`2.DefaultValueCount">
            <summary>
            The number of default Key-Value pairs present in this dictionary.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Utilities.DefaultsDictionary`2.Keys">
            <summary>
            If WillReturnDefaultValues is false, this returns the set of non-default keys
            If true, it returns the union of non-default and default keys
            </summary>
        </member>
        <member name="P:ABB.SrcML.Utilities.DefaultsDictionary`2.Values">
            <summary>
            Returns a list of the default
            </summary>
        </member>
        <member name="P:ABB.SrcML.Utilities.DefaultsDictionary`2.Item(`0)">
            <summary>
            Indexer for getting/setting Key-Value Pairs in the dictionary.
            
            Setting a Key-Value Pair causes a new non-default KVP to be set.
            
            Getting a Key-Value Pair first checks the non-default KVP set, and then checks the default KVP set.
            </summary>
            <param name="key">The key to set/get</param>
            <returns>The value corresponding to the key</returns>
        </member>
        <member name="P:ABB.SrcML.Utilities.DefaultsDictionary`2.Count">
            <summary>
            The number of Key-Value Pairs in this default dictionary. If WillReturnDefaultValues is true, then this is equal to both default and non-default counts.
            If WillReturnDefaultValues is false, then Count == NonDefaultValueCount.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Utilities.DefaultsDictionary`2.IsReadOnly">
            <summary>
            Returns false, as this dictionary is never read-only
            </summary>
        </member>
        <member name="T:ABB.SrcML.Utilities.KsuAdapter">
            <summary>
            Collection of functions for working with the Kent State SrcML executables
            </summary>
        </member>
        <member name="M:ABB.SrcML.Utilities.KsuAdapter.MakeArgumentString(System.Collections.ObjectModel.Collection{System.String})">
            <summary>
            Combine the strings into a space seperated list that can be passed to a Process.
            </summary>
            <param name="arguments">the arguments to be combined</param>
            <returns>the arguments combined into a string, separated by spaces</returns>
        </member>
        <member name="M:ABB.SrcML.Utilities.KsuAdapter.GetLanguage(ABB.SrcML.Language)">
            <summary>
            Get the string representation of the Language enumeration
            </summary>
            <param name="language">a Language value</param>
            <returns>The string representation of language</returns>
        </member>
        <member name="M:ABB.SrcML.Utilities.KsuAdapter.ConvertMappingToString(System.Collections.Generic.IDictionary{System.String,ABB.SrcML.Language})">
            <summary>
            Converts an extension mapping dictionary to a string that can be passed to src2srcml.exe.
            If the extensions begin with a dot, these are stripped to conform with src2srcml.exe's input format.
            </summary>
            <param name="extensionMapping">An extension mapping dictionary</param>
            <returns>A comma separated list of mappings of the form ("EXT=LANG").</returns>
        </member>
        <member name="T:ABB.SrcML.Utilities.ReadOnlyDictionary`2">
            <summary>
            ReadOnlyDictionary provides a read-only wrapper (similar to ReadOnlyCollection) for dictionaries.
            If the dictionary is consistently accessed through this class, then NotSupportedExceptions will be thrown whenever the class is modified.
            </summary>
            <typeparam name="TKey">The key type</typeparam>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="M:ABB.SrcML.Utilities.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Create a new ReadOnlyDictionary that with the given dictionary
            </summary>
            <param name="dictionary">The dictionary to provide a read-only interface for</param>
        </member>
        <member name="M:ABB.SrcML.Utilities.ReadOnlyDictionary`2.Add(`0,`1)">
            <summary>
            Not supported
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:ABB.SrcML.Utilities.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            True if this dictionary contains <paramref name="key"/>
            </summary>
            <param name="key">the key to check for</param>
            <returns>true if present; false otherwise</returns>
        </member>
        <member name="M:ABB.SrcML.Utilities.ReadOnlyDictionary`2.Remove(`0)">
            <summary>
            Not supported
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.Utilities.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            place the value corresponding to <paramref name="key"/> into <paramref name="value"/>.
            </summary>
            <param name="key">The key to search for</param>
            <param name="value">the out parameter to place the result in</param>
            <returns>true if the key is present; false otherwise</returns>
        </member>
        <member name="M:ABB.SrcML.Utilities.ReadOnlyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Not supported
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:ABB.SrcML.Utilities.ReadOnlyDictionary`2.Clear">
            <summary>
            Not supported
            </summary>
        </member>
        <member name="M:ABB.SrcML.Utilities.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Tests whether or not the Key-Value Pair <paramref name="item"/> is contained in this dictionary
            </summary>
            <param name="item">the key-value pair to check for</param>
            <returns>true if present; false otherwise</returns>
        </member>
        <member name="M:ABB.SrcML.Utilities.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the contents of this dictionary to <paramref name="array"/>, starting at <paramref name="arrayIndex"/>
            </summary>
            <param name="array">The array to copy the Key-Value Pairs to</param>
            <param name="arrayIndex">The index to start copying to</param>
        </member>
        <member name="M:ABB.SrcML.Utilities.ReadOnlyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Not supported
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.Utilities.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator over the Key-Value Pairs in this dictionary
            </summary>
            <returns>An Enumerator</returns>
        </member>
        <member name="M:ABB.SrcML.Utilities.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator over the Key-Value Pairs in this dictionary
            </summary>
            <returns>An Enumerator</returns>
        </member>
        <member name="P:ABB.SrcML.Utilities.ReadOnlyDictionary`2.Keys">
            <summary>
            a collection of the keys in this dictionary
            </summary>
        </member>
        <member name="P:ABB.SrcML.Utilities.ReadOnlyDictionary`2.Values">
            <summary>
            a collection of the values in this dictionary
            </summary>
        </member>
        <member name="P:ABB.SrcML.Utilities.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Returns the value corresponding to the key
            The Setter is not supported.
            </summary>
            <param name="key">The key to search for</param>
            <returns>the value corresponding to <paramref name="key"/></returns>
        </member>
        <member name="P:ABB.SrcML.Utilities.ReadOnlyDictionary`2.Count">
            <summary>
            Returns the number of Key-Value Pairs in this dictionary
            </summary>
        </member>
        <member name="P:ABB.SrcML.Utilities.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
            Returns true, as this dictionary is always read-only
            </summary>
        </member>
        <member name="T:ABB.SrcML.Utilities.SrcMLExceptionFormatter">
            <summary>
            Format the exception message
            </summary>
        </member>
        <member name="M:ABB.SrcML.Utilities.SrcMLExceptionFormatter.CreateMessage(System.Exception)">
            <summary>
            Return a formatted message string.
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.Utilities.SrcMLExceptionFormatter.CreateMessage(System.Exception,System.String)">
            <summary>
            Return a formatted message string.
            </summary>
            <param name="ex"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="T:ABB.SrcML.Utilities.SrcMLFileLogger">
            <summary>
            File logger for SrcML.NET
            </summary>
        </member>
        <member name="M:ABB.SrcML.Utilities.SrcMLFileLogger.CreateFileLogger(System.String,System.String)">
            <summary>
            Create a file logger
            </summary>
            <param name="loggerName"></param>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="P:ABB.SrcML.Utilities.SrcMLFileLogger.DefaultLogger">
            <summary>
            Return the default logger
            </summary>
        </member>
        <member name="M:ABB.SrcML.Utilities.SrcMLRuntimeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Utilities.SrcMLRuntimeException"/> class.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Utilities.SrcMLRuntimeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Utilities.SrcMLRuntimeException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.SrcML.Utilities.SrcMLRuntimeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Utilities.SrcMLRuntimeException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ABB.SrcML.Utilities.SrcMLRuntimeException.#ctor(System.String,System.String,ABB.SrcML.Utilities.ExecutableReturnValue)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Utilities.SrcMLRuntimeException"/> class.
            </summary>
            <param name="pathToExecutable">The path to executable.</param>
            <param name="arguments">The arguments.</param>
            <param name="returnValue">The return value.</param>
        </member>
        <member name="M:ABB.SrcML.Utilities.SrcMLRuntimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.Utilities.SrcMLRuntimeException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:ABB.SrcML.Utilities.SrcMLRuntimeException.ReturnValue">
            <summary>
            Gets the executable return value
            </summary>
        </member>
        <member name="P:ABB.SrcML.Utilities.SrcMLRuntimeException.ErrorMessage">
            <summary>
            Gets the error message that corresponds to <see cref="T:ABB.SrcML.Utilities.ExecutableReturnValue"/>
            </summary>
        </member>
        <member name="P:ABB.SrcML.Utilities.SrcMLRuntimeException.ArgumentString">
            <summary>
            Gets the argument string passed to the srcML executable
            </summary>
        </member>
        <member name="M:ABB.SrcML.Utilities.TaskManager.Run(System.Threading.Tasks.Task)">
            <summary>
            Runs the specified action on this thread. The action will be run with the following continuations: <see cref="M:ABB.SrcML.Utilities.TaskManager.DecrementOnCompletion(System.Threading.Tasks.Task)"/> and <see cref="!:LogExceptions"/>
            </summary>
            <param name="task">The task to run.</param>
        </member>
        <member name="M:ABB.SrcML.Utilities.TaskManager.RunAsync(System.Threading.Tasks.Task)">
            <summary>
            Runs the specified action on <see cref="T:System.Threading.Tasks.TaskFactory"/>. The action will be run with the following continuations: <see cref="M:ABB.SrcML.Utilities.TaskManager.DecrementOnCompletion(System.Threading.Tasks.Task)"/> and <see cref="!:LogExceptions"/> 
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:ABB.SrcML.Utilities.TaskManager.DecrementOnCompletion(System.Threading.Tasks.Task)">
            <summary>
            Convenience function for adding a continuation that will call <see cref="M:ABB.SrcML.Utilities.TaskManager.DecrementTask"/> upon task completion.
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:ABB.SrcML.Utilities.TaskManager.OnIsReadyChanged(ABB.SrcML.IsReadyChangedEventArgs)">
            <summary>
            event handler for <see cref="E:ABB.SrcML.Utilities.TaskManager.IsReadyChanged"/>
            </summary>
            <param name="e">event arguments</param>
        </member>
        <member name="M:ABB.SrcML.Utilities.TaskManager.IncrementTask">
            <summary>
            Increments <see cref="P:ABB.SrcML.Utilities.TaskManager.CountOfRunningTasks"/> (called via the <see cref="M:ABB.SrcML.Utilities.TaskManager.Run(System.Threading.Tasks.Task)"/> method). If <see cref="P:ABB.SrcML.Utilities.TaskManager.IsReady"/> is true, this sets it to false.
            </summary>
        </member>
        <member name="M:ABB.SrcML.Utilities.TaskManager.DecrementTask">
            <summary>
            Decrements <see cref="P:ABB.SrcML.Utilities.TaskManager.CountOfRunningTasks"/> (called via the <see cref="M:ABB.SrcML.Utilities.TaskManager.DecrementOnCompletion(System.Threading.Tasks.Task)"/> which is used in the <see cref="M:ABB.SrcML.Utilities.TaskManager.Run(System.Threading.Tasks.Task)"/> method.
            If the number of tasks becomes zero, then <see cref="P:ABB.SrcML.Utilities.TaskManager.IsReady"/> is set to true.
            </summary>
        </member>
        <member name="E:ABB.SrcML.Utilities.TaskManager.IsReadyChanged">
            <summary>
            Event fires when the <see cref="P:ABB.SrcML.Utilities.TaskManager.IsReady"/> property changes
            </summary>
        </member>
        <member name="P:ABB.SrcML.Utilities.TaskManager.IsReady">
            <summary>
            Archives are "ready" when they have no running tasks. This property automatically changes to false
            when the number of running tasks is zero. Whenever the value changes, the <see cref="E:ABB.SrcML.Utilities.TaskManager.IsReadyChanged"/> event fires.
            </summary>
        </member>
        <member name="P:ABB.SrcML.Utilities.TaskManager.Scheduler">
            <summary>
            Task scheduler for the asynchronous methods
            </summary>
        </member>
        <member name="P:ABB.SrcML.Utilities.TaskManager.CountOfRunningTasks">
            <summary>
            The number of tasks that are currently running
            </summary>
        </member>
        <member name="T:ABB.SrcML.Utilities.VisualStudioProjectReader">
            <summary>
            Reader class for reading Visual Studo project files
            </summary>
        </member>
        <member name="M:ABB.SrcML.Utilities.VisualStudioProjectReader.ReadProjectFile(System.String)">
            <summary>
            read the source files from the given Visual Studio project
            </summary>
            <param name="fileName">the filename for the Visual Studio project</param>
            <returns>an array of source files</returns>
        </member>
        <member name="M:ABB.SrcML.Utilities.VisualStudioProjectReader.ReadCSProject(System.String)">
            <summary>
            Parse a C# project file
            </summary>
            <param name="fileName">the path to the C# project file</param>
            <returns>an array of source files</returns>
        </member>
        <member name="M:ABB.SrcML.Utilities.VisualStudioProjectReader.ReadVCProject(System.String)">
            <summary>
            Parse a Visual C++ projecct file
            </summary>
            <param name="fileName">the path to the VC++ project file</param>
            <returns>an array of source files</returns>
        </member>
        <member name="T:ABB.SrcML.XmlHelper">
            <summary>
            Collection of static functions for working with XML.
            </summary>
        </member>
        <member name="M:ABB.SrcML.XmlHelper.StreamElements(System.String,System.Xml.Linq.XName,System.Int32)">
            <summary>
            Stream elements that have the given name.
            This uses the technique defined http://msdn.microsoft.com/en-us/library/bb387008(v=vs.90).aspx
            with modifications from here: http://social.msdn.microsoft.com/Forums/en/xmlandnetfx/thread/da366348-f209-433f-bb3b-8b5615409fe0
            </summary>
            <param name="fileName">the filename to stream elements from</param>
            <param name="name">The XName to find in the XML document</param>
            <param name="minimumDepth">The minimum depth to find elements at in the DOM tree</param>
            <returns>elements from this XML document with name <paramref name="name"/></returns>
        </member>
        <member name="M:ABB.SrcML.XmlHelper.ReadWithLineInfo(System.Xml.XmlReader,System.Xml.IXmlLineInfo)">
            <summary>
            Read an XNode from the given XmlReader and LineInfo object. If available, line info will be added to XElement.
            This technique is adapted from here: http://blogs.msdn.com/b/mikechampion/archive/2006/09/10/748408.aspx
            </summary>
            <param name="reader">The XmlReader to read from</param>
            <param name="lineInfo">This should be <paramref name="reader"/> cast as an <see cref="T:System.Xml.IXmlLineInfo"/></param>
            <returns>an XNode with line information if present</returns>
            <seealso cref="M:System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)">This function replaces XNode.ReadFrom</seealso>
        </member>
    </members>
</doc>
