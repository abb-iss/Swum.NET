<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ABB.SrcML.Core</name>
    </assembly>
    <members>
        <member name="T:ABB.SrcML.IFileMonitor">
            <summary>
            This interface is designed for all events that can be raised from SrcML.NET.
            </summary>
        </member>
        <member name="M:ABB.SrcML.IFileMonitor.StartMonitoring">
            <summary>
            Start monitoring files
            </summary>
        </member>
        <member name="M:ABB.SrcML.IFileMonitor.StopMonitoring">
            <summary>
            Stop monitoring files
            </summary>
        </member>
        <member name="M:ABB.SrcML.IFileMonitor.GetFilesFromSource">
            <summary>
            Get all monitored files
            </summary>
            <param name="worker"></param>
            <returns></returns>
        </member>
        <member name="T:ABB.SrcML.FileEventType">
            <summary>
            Event type enumeration.
            </summary>
        </member>
        <member name="F:ABB.SrcML.FileEventType.FileAdded">
            <summary>
            Raised when a file is added
            </summary>
        </member>
        <member name="F:ABB.SrcML.FileEventType.FileChanged">
            <summary>
            Raised when a file is changed
            </summary>
        </member>
        <member name="F:ABB.SrcML.FileEventType.FileDeleted">
            <summary>
            Raised when a file is deleted
            </summary>
        </member>
        <member name="F:ABB.SrcML.FileEventType.FileRenamed">
            <summary>
            Raised when a file is renamed
            </summary>
        </member>
        <member name="T:ABB.SrcML.FileEventRaisedArgs">
            <summary>
            Event data of SrcML.NET events.
            </summary>
        </member>
        <member name="M:ABB.SrcML.FileEventRaisedArgs.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:ABB.SrcML.FileEventRaisedArgs.#ctor(ABB.SrcML.FileEventType,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="eventType"></param>
            <param name="pathToFile"></param>
        </member>
        <member name="M:ABB.SrcML.FileEventRaisedArgs.#ctor(ABB.SrcML.FileEventType,System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="eventType"></param>
            <param name="pathToFile"></param>
            <param name="hasSrcML"></param>
        </member>
        <member name="M:ABB.SrcML.FileEventRaisedArgs.#ctor(ABB.SrcML.FileEventType,System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="eventType"></param>
            <param name="pathToFile"></param>
            <param name="oldPathToFile"></param>
        </member>
        <member name="M:ABB.SrcML.FileEventRaisedArgs.#ctor(ABB.SrcML.FileEventType,System.String,System.String,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="eventType"></param>
            <param name="pathToFile"></param>
            <param name="oldPathToFile"></param>
            <param name="hasSrcML"></param>
        </member>
        <member name="P:ABB.SrcML.FileEventRaisedArgs.EventType">
            <summary>
            Type of the file event
            </summary>
        </member>
        <member name="P:ABB.SrcML.FileEventRaisedArgs.OldFilePath">
            <summary>
            Old file path
            </summary>
        </member>
        <member name="P:ABB.SrcML.FileEventRaisedArgs.FilePath">
            <summary>
            File path
            </summary>
        </member>
        <member name="P:ABB.SrcML.FileEventRaisedArgs.HasSrcML">
            <summary>
            Whether has a corresponding srcML file
            </summary>
        </member>
        <member name="T:ABB.SrcML.IsReadyChangedEventArgs">
            <summary>
            Event arguments for IsReady changed events
            </summary>
        </member>
        <member name="M:ABB.SrcML.IsReadyChangedEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ABB.SrcML.IsReadyChangedEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructs a new object
            </summary>
            <param name="updatedReadyState">The updated ready state</param>
        </member>
        <member name="P:ABB.SrcML.IsReadyChangedEventArgs.ReadyState">
            <summary>
            The updated ready state
            </summary>
        </member>
        <member name="T:ABB.SrcML.Language">
            <summary>
            Enumeration of languages that can be parsed by SrcML.
            </summary>
        </member>
        <member name="F:ABB.SrcML.Language.Any">
            <summary>Indicates that srcML should choose the language based on file extension.</summary>
        </member>
        <member name="F:ABB.SrcML.Language.CPlusPlus">
            <summary>Indicates that srcML should use the C++ language.</summary>
        </member>
        <member name="F:ABB.SrcML.Language.C">
            <summary>Indicates that srcML should use the C language.</summary>
        </member>
        <member name="F:ABB.SrcML.Language.Java">
            <summary>Indicates that srcML should use the Java language.</summary>
        </member>
        <member name="F:ABB.SrcML.Language.AspectJ">
            <summary>Indicates that srcML should use the Aspect-J language.</summary>
        </member>
        <member name="F:ABB.SrcML.Language.CSharp">
            <summary>Indicates that srcML should use the C# language.</summary>
        </member>
        <member name="T:ABB.SrcML.LineInfo">
            <summary>
            Class for storing line information for an XNode. LineInfo objects are typically added as annotations to XElements.
            </summary>
        </member>
        <member name="M:ABB.SrcML.LineInfo.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new LineInfo object with the given line number and position.
            </summary>
            <param name="lineNumber">the line number</param>
            <param name="position">the column number</param>
        </member>
        <member name="P:ABB.SrcML.LineInfo.LineNumber">
            <summary>
            Line number property. The line in the Xml document that the element appears on.
            </summary>
        </member>
        <member name="P:ABB.SrcML.LineInfo.Position">
            <summary>
            Line position property. The character position in the Xml document that the element appears on.
            </summary>
        </member>
        <member name="T:ABB.SrcML.CPP">
            <summary>
            SrcML Namespace for C pre-preprocessor directives.
            </summary>
        </member>
        <member name="F:ABB.SrcML.CPP.Prefix">
            <summary>
            XMLNS prefix for the SrcML CPP namespace
            </summary>
        </member>
        <member name="F:ABB.SrcML.CPP.NS">
            <summary>
            XNamespace for the SrcML CPP XML namespace
            </summary>
        </member>
        <member name="F:ABB.SrcML.CPP.Directive">
            <summary>
            Each CPP Directive is surrounded by 
            
            #include &lt;windows.h&gt; becomes:
            
            &lt;cpp:include&gt;#&lt;cpp:directive&gt;include&lt;/cpp:directive&gt; &lt;cpp:file&gt;&lt;jni.h&gt;&lt;/cpp:file&gt;&lt;/cpp:include&gt;
            </summary>
        </member>
        <member name="F:ABB.SrcML.CPP.File">
            <summary>
            References to files in CPP directives are surrounded by the File element:
            
            #include &lt;windows.h&gt; becomes:
            
            &lt;cpp:include&gt;#&lt;cpp:directive&gt;include&lt;/cpp:directive&gt; &lt;cpp:file&gt;&lt;jni.h&gt;&lt;/cpp:file&gt;&lt;/cpp:include&gt;
            </summary>
        </member>
        <member name="F:ABB.SrcML.CPP.Include">
            <summary>
            markup for #include:
            
            #include &lt;windows.h&gt; becomes:
            
            &lt;cpp:include&gt;#&lt;cpp:directive&gt;include&lt;/cpp:directive&gt; &lt;cpp:file&gt;&lt;jni.h&gt;&lt;/cpp:file&gt;&lt;/cpp:include&gt;
            </summary>
        </member>
        <member name="F:ABB.SrcML.CPP.Define">
            <summary>
            markup for #define macro
            </summary>
        </member>
        <member name="F:ABB.SrcML.CPP.Undef">
            <summary>
            markup for #undef macro
            </summary>
        </member>
        <member name="F:ABB.SrcML.CPP.If">
            <summary>
            markup for #if macro
            </summary>
        </member>
        <member name="F:ABB.SrcML.CPP.Then">
            <summary>
            markup for the "then" portion of the #if/#else macro set
            </summary>
        </member>
        <member name="F:ABB.SrcML.CPP.Else">
            <summary>
            markup for #else tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.CPP.Endif">
            <summary>
            #endif becomes:
            
            &lt;cpp:endif&gt;#&lt;cpp:directive&gt;endif&lt;/cpp:directive&gt;&lt;/cpp:endif&gt;
            </summary>
        </member>
        <member name="F:ABB.SrcML.CPP.Elif">
            <summary>
            markup for the elif tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.CPP.Ifdef">
            <summary>
            #ifdef __cplusplus becomes:
            
            &lt;cpp:ifdef&gt;#&lt;cpp:directive&gt;ifdef&lt;/cpp:directive&gt; &lt;name&gt;__cplusplus&lt;/name&gt;&lt;/cpp:ifdef&gt;
            </summary>
        </member>
        <member name="F:ABB.SrcML.CPP.Ifndef">
            <summary>
            markup for the #ifndef macro
            </summary>
        </member>
        <member name="F:ABB.SrcML.CPP.Line">
            <summary>
            markup for the #line macro
            </summary>
        </member>
        <member name="T:ABB.SrcML.DIFF">
            <summary>
            The DIFF class contains all of the XNames for SrcML Diff namespace.
            </summary>
        </member>
        <member name="F:ABB.SrcML.DIFF.Prefix">
            <summary>
            XMLNS prefix for the SrcML SRC namespace
            </summary>
        </member>
        <member name="F:ABB.SrcML.DIFF.TypeWhitespace">
            <summary>
            The "whitespace" value for <see cref="F:ABB.SrcML.DIFF.TypeAttribute"/>
            </summary>
        </member>
        <member name="F:ABB.SrcML.DIFF.TypeChange">
            <summary>
            /// The "change" value for <see cref="F:ABB.SrcML.DIFF.TypeAttribute"/>
            </summary>
        </member>
        <member name="F:ABB.SrcML.DIFF.NS">
            <summary>
            XNamespace for the SrcML SRC XML namespace
            </summary>
        </member>
        <member name="F:ABB.SrcML.DIFF.Insert">
            <summary>
            Markup for the diff:insert tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.DIFF.Delete">
            <summary>
            Markup for the diff:delete tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.DIFF.TypeAttribute">
            <summary>
            XName for the "type" attribute. The value of this attribute can be either TypeWhitespace or TypeChange
            </summary>
        </member>
        <member name="T:ABB.SrcML.LIT">
            <summary>
            SrcML Namespace for literals
            </summary>
        </member>
        <member name="F:ABB.SrcML.LIT.Prefix">
            <summary>
            XMLNS prefix for the SrcML LIT namespace
            </summary>
        </member>
        <member name="F:ABB.SrcML.LIT.ArgumentLabel">
            <summary>
            Argument string to pass to one of the srcml executables to enable this namespace
            </summary>
        </member>
        <member name="F:ABB.SrcML.LIT.NS">
            <summary>
            XNamespace for the SrcML Literal XML namespace
            </summary>
        </member>
        <member name="F:ABB.SrcML.LIT.Literal">
            <summary>
            Literal element -- all literals are surrounded with this:
            e.g. &lt;literal&gt;-&lt;&lt;/literal&gt;
            &lt;lit:literal type="string"&gt;"foo"&lt;/lit:literal&gt;
            </summary>
        </member>
        <member name="T:ABB.SrcML.OP">
            <summary>
            The operator namespace marks up operators ('-&lt;', '.', '+', '-') with the Operator element.
            </summary>
        </member>
        <member name="F:ABB.SrcML.OP.Prefix">
            <summary>
            XMLNS prefix for the SrcML OP namespace
            </summary>
        </member>
        <member name="F:ABB.SrcML.OP.ArgumentLabel">
            <summary>
            Argument string to pass to one of the srcml executables to enable this namespace
            </summary>
        </member>
        <member name="F:ABB.SrcML.OP.NS">
            <summary>
            XNamespace for the SrcML Operator XML namespace
            </summary>
        </member>
        <member name="F:ABB.SrcML.OP.Operator">
            <summary>
            Operator element -- all operators are surrounded with this:
            e.g. &lt;operator&gt;-&lt;&lt;/operator&gt;
            </summary>
        </member>
        <member name="T:ABB.SrcML.POS">
            <summary>
            SrcML Namespace for source position.
            </summary>
        </member>
        <member name="F:ABB.SrcML.POS.Prefix">
            <summary>
            XMLNS prefix for the SrcML OP namespace
            </summary>
        </member>
        <member name="F:ABB.SrcML.POS.ArgumentLabel">
            <summary>
            Argument string to pass to one of the srcml executables to enable this namespace
            </summary>
        </member>
        <member name="F:ABB.SrcML.POS.NS">
            <summary>
            XNamespace for the SrcML Position XML namespace
            </summary>
        </member>
        <member name="F:ABB.SrcML.POS.Line">
            <summary>
            This attribute indicates the line number that the source element is located on
            </summary>
        </member>
        <member name="F:ABB.SrcML.POS.Column">
            <summary>
            This attribute indicates the column that the source element starts at
            </summary>
        </member>
        <member name="T:ABB.SrcML.SRC">
            <summary>
            The SRC class contains all of the XNames for SrcML SRC tags.
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Prefix">
            <summary>
            XMLNS prefix for the SrcML SRC namespace
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.NS">
            <summary>
            XNamespace for the SrcML SRC XML namespace
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Unit">
            <summary>
            markup for the unit tag.
            
            The unit tag is the basic Container for SrcML. A Unit can represent either a single source file, or a collection of source files (in which case the XML document will have a single root unit, with many child units).
            </summary>
            TODO document unit attributes.
        </member>
        <member name="F:ABB.SrcML.SRC.Block">
            <summary>
            XML Markup for the source code block:
            
            <code lang="XML">&lt;block&gt;{ ...statements... }&lt;block&gt;</code>
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Comment">
            <summary>
            markup for the comment tag
            </summary>
            TODO document comment attributes.
        </member>
        <member name="F:ABB.SrcML.SRC.Public">
            <summary>
            markup for the public access specifier.
            
            In C++, the following class:break
            
            <code lang="C++">
            class A
            {
            public:
                int a;
            }
            </code>
            
            will be marked up as
            
            <code lang="XML">
            &lt;class&gt;class &lt;name&gt;A&lt;/name&gt;
            &lt;block&gt;{&lt;private type="default"&gt;
            &lt;/private&gt;&lt;public&gt;public:
            &lt;function_decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt;;&lt;/function_decl&gt;
            &lt;/public&gt;}&lt;/block&gt;&lt;decl/&gt;&lt;/class&gt;
            </code>
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Private">
            <summary>
            markup for the private tag
            </summary>
            TODO document private attributes.
        </member>
        <member name="F:ABB.SrcML.SRC.Protected">
             markup for the public access specifier.
             
             In C++, the following class:
             
             <code lang="C++">
             class A
             {
             public:
                 int a;
             }
             </code>
             
             will be marked up as
             
             <code lang="XML">
            &lt;class&gt;class &lt;name&gt;A&lt;/name&gt;
            &lt;block&gt;{&lt;private type="default"&gt;
            &lt;/private&gt;&lt;protected&gt;protected:
            	&lt;function_decl&gt;&lt;type&gt;&lt;name&gt;int&lt;/name&gt;&lt;/type&gt; &lt;name&gt;a&lt;/name&gt;&lt;parameter_list&gt;()&lt;/parameter_list&gt;;&lt;/function_decl&gt;
            &lt;/protected&gt;}&lt;/block&gt;&lt;decl/&gt;&lt;/class&gt;
             </code>
        </member>
        <member name="F:ABB.SrcML.SRC.ExpressionStatement">
            <summary>
            markup for the expr expression statement tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Expression">
            <summary>
            markup for the expr tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Declaration">
            <summary>
            markup for the decl tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Type">
            <summary>
            markup for the type tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Name">
            <summary>
            markup for the name tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Init">
            <summary>
            markup for the init tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Index">
            <summary>
            markup for the index tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Package">
            <summary>
            markup for the java package tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.DeclarationStatement">
            <summary>
            markup for the decl_stmt tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Typedef">
            <summary>
            markup for the typedef tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Label">
            <summary>
            markup for the label tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Goto">
            <summary>
            markup for the goto tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Asm">
            <summary>
            markup for the asm tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Enum">
            <summary>
            markup for the enum tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.If">
            <summary>
            markup for the if tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Then">
            <summary>
            markup for the then block tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Else">
            <summary>
            markup for the else tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.While">
            <summary>
            markup for the while tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Do">
            <summary>
            markup for the do tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.For">
            <summary>
            markup for the for tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Increment">
            <summary>
            markup for the incr tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Condition">
            <summary>
            markup for the condition tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Switch">
            <summary>
            markup for the switch tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Case">
            <summary>
            markup for the case tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Default">
            <summary>
            markup for the default tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Break">
            <summary>
            markup for the break tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Continue">
            <summary>
            markup for the continue tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Call">
            <summary>
            markup for the call tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.ArgumentList">
            <summary>
            markup for the argument_list tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Argument">
            <summary>
            markup for the argument tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.FunctionPrototype">
            <summary>
            markup for the function_prototype tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Function">
            <summary>
            markup for the function tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.FunctionDeclaration">
            <summary>
            markup for the  function_decl tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.ParameterList">
            <summary>
            markup for the parameter_list tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Parameter">
            <summary>
            markup for the param tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Specifier">
            <summary>
            markup for the specifier tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Return">
            <summary>
            markup for the return tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Class">
            <summary>
            markup for the class tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.ClassDeclaration">
            <summary>
            markup for the class_decl tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Struct">
            <summary>
            markup for the struct tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.StructDeclaration">
            <summary>
            markup for the struct_decl tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Union">
            <summary>
            markup for the union tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.UnionDeclaration">
            <summary>
            markup for the union_decl tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Constructor">
            <summary>
            markup for the Constructor tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.MemberList">
            <summary>
            markup for the member_list tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.ConstructorDeclaration">
            <summary>
            markup for the constructor_decl tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Destructor">
            <summary>
            markup for the destructor tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.DestructorDeclaration">
            <summary>
            markup for the destructor_decl tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Super">
            <summary>
            markup for the super tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Extends">
            <summary>
            markup for the extends java tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Implements">
            <summary>
            markup for the implements java tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Import">
            <summary>
            markup for the import java tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Try">
            <summary>
            markup for the try tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Throw">
            <summary>
            markup for the throw tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Catch">
            <summary>
            markup for the catch tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Template">
            <summary>
            markup for the template tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Namespace">
            <summary>
            markup for the namespace tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Using">
            <summary>
            markup for the using tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Extern">
            <summary>
            markup for the extern tag
            </summary>
        </member>
        <member name="F:ABB.SrcML.SRC.Macro">
            <summary>
            markup for the macro tag
            </summary>
        </member>
        <member name="T:ABB.SrcML.TYPE">
            <summary>
            SrcML Namespace for C/C++ modifiers
            </summary>
        </member>
        <member name="F:ABB.SrcML.TYPE.Prefix">
            <summary>
            XMLNS prefix for the SrcML TYPE namespace
            </summary>
        </member>
        <member name="F:ABB.SrcML.TYPE.ArgumentLabel">
            <summary>
            Argument string to pass to one of the srcml executables to enable this namespace
            </summary>
        </member>
        <member name="F:ABB.SrcML.TYPE.NS">
            <summary>
            XNamespace for the SrcML Modifier XML namespace
            </summary>
        </member>
        <member name="F:ABB.SrcML.TYPE.Modifier">
            <summary>
            Operator element -- all operators are surrounded with this:
            e.g. &lt;operator&gt;-&lt;&lt;/operator&gt;
            </summary>
        </member>
        <member name="T:ABB.SrcML.SrcMLElement">
            <summary>
            Contains static utility methods that act upon srcML XElements.
            </summary>
        </member>
        <member name="M:ABB.SrcML.SrcMLElement.GetMethodSignature(System.Xml.Linq.XElement)">
            <summary>
            Gets the method signature from the method definition srcML element.
            </summary>
            <param name="methodElement">The srcML method element to extract the signature from.</param>
            <returns>The method signature</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLElement.GetLanguageForUnit(System.Xml.Linq.XElement)">
            <summary>
            Gets the language for a unit element.
            
            It throws an exception if the element is not a unit, has no language, or the language is invalid. <see cref="T:ABB.SrcML.Language"/>
            </summary>
            <param name="fileUnit">The file unit to get the language for</param>
            <returns>The language</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLElement.GetLanguageFromString(System.String)">
            <summary>
            Helper method to get a Language value from a string. This is primarily used by obsolete SrcML.cs APIs to interface with newer code that does use the Language enumeration.
            </summary>
            <param name="language">a string to convert</param>
            <returns>the Language value that corresponds to language.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLElement.GetFileNameForUnit(System.Xml.Linq.XElement)">
            <summary>
            Returns the filename attribute in the given unit element.
            </summary>
            <param name="fileUnit"></param>
            <returns></returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLElement.Load(System.String)">
            <summary>
            Loads an <see cref="T:System.Xml.Linq.XElement"/> from the file name with whitespae preserved and line info included
            </summary>
            <param name="xmlFileName">The srcml file name</param>
            <returns>An XElement</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLElement.GetXPath(System.Xml.Linq.XElement)">
            <summary>
            Gets the X path that uniquely identifies the given XElement relative to to the containing file unit.
            </summary>
            <param name="element">The element.</param>
            <returns>An XPath query that uniquely identifies <paramref name="element"/></returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLElement.GetXPath(System.Xml.Linq.XElement,System.Boolean)">
            <summary>
            Gets an XPath query that uniquely identifies the given XElement
            </summary>
            <param name="element">The element to create an XPath query for</param>
            <param name="relativeToFileUnit">whether or not the XPath query is relative to the parent file unit or not</param>
            <returns>An XPath query that uniquely identifies <paramref name="element"/></returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLElement.GetXmlLineNumber(System.Xml.Linq.XElement)">
            <summary>
            Gets the line number for the given element.
            </summary>
            <param name="element">The element</param>
            <returns>The line number that the given element is found on; -1 if the data is not present</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLElement.GetXmlLinePosition(System.Xml.Linq.XElement)">
            <summary>
            Gets the line position for the given element.
            </summary>
            <param name="element">The element</param>
            <returns>The line number that the given element is found on; -1 if the data is not present</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLElement.GetSrcLineNumber(System.Xml.Linq.XElement)">
            <summary>
            Gets the line of source code that contains the given element.
            <para>This differs from <see cref="M:ABB.SrcML.SrcMLElement.GetXmlLineNumber(System.Xml.Linq.XElement)"/> in that this is the number of lines relative
            to the current <see cref="F:ABB.SrcML.SRC.Unit"/>; this matches to the line number in the original source file.</para>
            </summary>
            <param name="element">The element</param>
            <returns>The line of source code; -1 if that info is not found.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLElement.GetEndingSrcLineNumber(System.Xml.Linq.XElement)">
            <summary>
            Gets the ending source line number.
            </summary>
            <param name="element">The element.</param>
            <returns>the last line number this element occupies</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLElement.GetSrcLinePosition(System.Xml.Linq.XElement)">
            <summary>
            Gets the original source column number that the given element starts on.
            </summary>
            <param name="element">The element</param>
            <returns>The column number that this element starts on. This will return 0 if the element is a Unit and -1 if no line information is present.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLElement.SetLineInfo(System.Xml.Linq.XObject,ABB.SrcML.LineInfo)">
            <summary>
            Adds line info to the given XObject.
            </summary>
            <param name="xmlObject">the XObject</param>
            <param name="lineInfo">a LineInfo object. This object is added as an annotation to <paramref name="xmlObject"/></param>
        </member>
        <member name="M:ABB.SrcML.SrcMLElement.ParentStatement(System.Xml.Linq.XNode)">
            <summary>
            Returns the parent statement (either expr_stmt, or decl_stmt) of the given node.
            </summary>
            <param name="node">The node to search from.</param>
            <returns>the parent element for <paramref name="node"/>. It will be either <see cref="F:ABB.SrcML.SRC.ExpressionStatement"/> or <see cref="F:ABB.SrcML.SRC.DeclarationStatement"/></returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLElement.ToSource(System.Xml.Linq.XElement)">
            <summary>
            Converts the tree rooted at the given element to source code.
            </summary>
            <param name="element">The element.</param>
            <returns>The source code in a string</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLElement.ToSource(System.Xml.Linq.XElement,System.Int32)">
            <summary>
            Converts the tree rooted at the given element to source code.
            <para>It optionally converts tab to spaces.</para>
            </summary>
            <param name="element">The element to convert.</param>
            <param name="spacesPerTab">The number of spaces to convert each tab to; if zero, no conversion is done.</param>
            <returns>The source code in a string.</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLElement.ThrowExceptionOnInvalidName(System.Xml.Linq.XName,System.Xml.Linq.XName)">
            <summary>
            <exception cref="T:ABB.SrcML.SrcMLRequiredNameException">Throws a SrcMLRequiredNameException if <paramref name="name"/> does not match <paramref name="requiredName"/>.</exception>
            </summary>
            <param name="name">The name.</param>
            <param name="requiredName">Name of the required.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLElement.ThrowExceptionOnInvalidName(System.Xml.Linq.XName,System.Collections.Generic.IEnumerable{System.Xml.Linq.XName})">
            <summary>
            <exception cref="T:ABB.SrcML.SrcMLRequiredNameException">Throws a SrcMLRequiredNameException if <paramref name="name"/> is not in the list of <paramref name="validNames">valid names</paramref>.</exception>
            </summary>
            <param name="name">The name.</param>
            <param name="validNames">The valid names.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLElement.ThrowExceptionOnInvalidName(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <summary>
            <exception cref="T:ABB.SrcML.SrcMLRequiredNameException">Thrown if the given <paramref name="element"/> does not have <paramref name="requiredName"/> as it's Name.</exception>
            </summary>
            <param name="element">The element to check the name for</param>
            <param name="requiredName">The name required</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLElement.ThrowExceptionOnInvalidName(System.Xml.Linq.XElement,System.Collections.Generic.IEnumerable{System.Xml.Linq.XName})">
            <summary>
            <exception cref="T:ABB.SrcML.SrcMLRequiredNameException">Thrown if the given <paramref name="element"/> does not have a Name from the list of <paramref name="validNames"/></exception>
            </summary>
            <param name="element">The element to check the name for</param>
            <param name="validNames">The collection of valid names</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLElement.GetNameForMethod(System.Xml.Linq.XElement)">
            <summary>
            <para>Gets the function name for the given method.</para>
            <para>If the function is an implementation of a class method, it has two parts: the class name and the method name. This function returns just the method name if both are present</para>
            </summary>
            <param name="method">The method to get the name for</param>
            <returns>The name of the method</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLElement.GetClassNameForMethod(System.Xml.Linq.XElement)">
            <summary>
            Gets the class name for method.
            </summary>
            <param name="method">The method.</param>
            <returns>the class name if found. Otherwise, null</returns>
        </member>
        <member name="M:ABB.SrcML.SrcMLElement.GetCallsFromFunction(System.Xml.Linq.XElement)">
            <summary>
            <para>Gets all the calls contained in a function element.Function elements can either be of type <c>SRC.Function</c> or <c>SRC.Constructor</c>.</para>
            <exception cref="T:ABB.SrcML.SrcMLRequiredNameException">thrown if <c>function.Name</c> is not <c>SRC.Constructor</c> or <c>SRC.Function</c></exception>
            </summary>
            <param name="function">the function to find calls in</param>
            <returns>all method calls and constructor uses</returns>
        </member>
        <member name="T:ABB.SrcML.SrcMLException">
            <summary>
            The base SrcML Exception
            </summary>
        </member>
        <member name="M:ABB.SrcML.SrcMLException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.SrcMLException"/> class.
            </summary>
        </member>
        <member name="M:ABB.SrcML.SrcMLException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.SrcMLException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLException.#ctor(System.String)">
            <summary>
            Create a SrcMLException with the given message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ABB.SrcML.SrcMLException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.SrcMLException"/> class.
            </summary>
            <param name="serializationInfo">The serialization info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="T:ABB.SrcML.SrcMLRequiredNameException">
            <summary>
            This exception is thrown whenever a function recieves an XElement parameter with an invalid XName.
            <see cref="!:ABB.SrcML.SrcMLHelper.ThrowExceptionOnInvalidName(System.Xml.Linq.XName,System.Xml.Linq.XName)">for the typical way of checking for and throwing this exception.</see>
            </summary>
        </member>
        <member name="M:ABB.SrcML.SrcMLRequiredNameException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.SrcMLRequiredNameException"/> class.
            </summary>
        </member>
        <member name="M:ABB.SrcML.SrcMLRequiredNameException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.SrcMLRequiredNameException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLRequiredNameException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.SrcMLRequiredNameException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLRequiredNameException.#ctor(System.Collections.Generic.ICollection{System.Xml.Linq.XName},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:ABB.SrcML.SrcMLRequiredNameException"/> class.
            </summary>
            <param name="validNames">The valid names.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLRequiredNameException.#ctor(System.Xml.Linq.XName,System.String)">
            <summary>
            Creates the exception with the given XName and message.
            </summary>
            <param name="expectedName">The expected XName</param>
            <param name="message">A message describing what went wrong</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLRequiredNameException.#ctor(System.Collections.Generic.ICollection{System.Xml.Linq.XName})">
            <summary>
            Creates the exception with the given collection of XNames and a default message
            </summary>
            <param name="validNames">collection of valid names</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLRequiredNameException.#ctor(System.Xml.Linq.XName)">
            <summary>
            Creates the exception with the given XName and a default message
            </summary>
            <param name="expectedName">The expected XName</param>
        </member>
        <member name="M:ABB.SrcML.SrcMLRequiredNameException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (Nothing in Visual Basic). </exception>
              
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Read="*AllFiles*" PathDiscovery="*AllFiles*"/>
              <IPermission class="System.Security.Permissions.SecurityPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" Flags="SerializationFormatter"/>
              </PermissionSet>
        </member>
        <member name="P:ABB.SrcML.SrcMLRequiredNameException.ExpectedNames">
            <summary>
            The collection of required names
            </summary>
        </member>
    </members>
</doc>
